<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>4.4</version>
    <date>2020-02-19T18:20:16Z</date>
    <media_types>
        <media_type>
            <name>PagerDuty</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>token</name>
                    <value>&lt;put your key&gt;</value>
                </parameter>
                <parameter>
                    <name>eventid</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>eventname</name>
                    <value>{EVENT.NAME}</value>
                </parameter>
                <parameter>
                    <name>hostname</name>
                    <value>{HOST.NAME}</value>
                </parameter>
                <parameter>
                    <name>hostip</name>
                    <value>{HOST.IP}</value>
                </parameter>
                <parameter>
                    <name>severity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>triggerdesc</name>
                    <value>{TRIGGER.DESCRIPTION}</value>
                </parameter>
                <parameter>
                    <name>triggeropdata</name>
                    <value>{EVENT.OPDATA}</value>
                </parameter>
                <parameter>
                    <name>eventtags</name>
                    <value>{EVENT.TAGS}</value>
                </parameter>
                <parameter>
                    <name>triggerid</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>eventdate</name>
                    <value>{EVENT.DATE}</value>
                </parameter>
                <parameter>
                    <name>eventtime</name>
                    <value>{EVENT.TIME}</value>
                </parameter>
                <parameter>
                    <name>eventack</name>
                    <value>{EVENT.ACK.STATUS}</value>
                </parameter>
                <parameter>
                    <name>eventupdate</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>eventvalue</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>url</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
            </parameters>
            <script>try {&#13;
&#13;
    var params = JSON.parse(value),&#13;
        req = new CurlHttpRequest(),&#13;
        fields = {},&#13;
        resp = '';&#13;
&#13;
    if (isNaN(parseInt(params.eventid)) || params.eventid &lt; 1) {&#13;
        throw 'incorrect value for variable &quot;eventid&quot;. The value must be a positive number.';&#13;
    }&#13;
    if (params.eventname.length &lt; 1) {&#13;
        throw 'incorrect value for variable &quot;eventname&quot;. The value must be a non-empty string.';&#13;
    }&#13;
    if (params.hostname.length &lt; 1) {&#13;
        throw 'incorrect value for variable &quot;eventname&quot;. The value must be a non-empty string.';&#13;
    }&#13;
    if (isNaN(parseInt(params.severity)) || (params.severity &lt; 0 &amp;&amp; params.severity &gt; 5)) {&#13;
        throw 'incorrect value for variable &quot;severity&quot;. The value must be a number 0..5.';&#13;
    }&#13;
    if (isNaN(parseInt(params.triggerid)) || params.triggerid &lt; 1) {&#13;
        throw 'incorrect value for variable &quot;triggerid&quot;. The value must be a positive number.';&#13;
    }&#13;
    if (params.eventack != 'Yes' &amp;&amp; params.eventack != 'No') {&#13;
        throw 'incorrect value for variable &quot;eventack&quot;. The value must be Yes or No.';&#13;
    }&#13;
    if (isNaN(parseInt(params.eventupdate)) || (params.eventupdate &lt; 0 || params.eventupdate &gt; 1)) {&#13;
        throw 'incorrect value for variable &quot;eventupdate&quot;. The value must be 0 or 1.';&#13;
    }&#13;
    if (isNaN(parseInt(params.eventvalue)) || (params.eventvalue &lt; 0 || params.eventvalue &gt; 1)) {&#13;
        throw 'incorrect value for variable &quot;eventvalue&quot;. The value must be 0 or 1.';&#13;
    }&#13;
&#13;
    // Correspondence between the PagerDuty and Zabbix severity level&#13;
    var severityMapping = [&#13;
        'info',    // Not classified&#13;
        'info',    // Information&#13;
        'warning', // Warning&#13;
        'warning', // Average&#13;
        'error',   // High&#13;
        'critical' // Disaster&#13;
    ];&#13;
&#13;
    req.AddHeader('Content-Type: application/json');&#13;
&#13;
    fields.routing_key = params.token;&#13;
    fields.dedup_key = params.eventid;&#13;
&#13;
    if ((params.eventvalue == 1) &amp;&amp; (params.eventupdate == 0)) {&#13;
        fields.event_action = 'trigger';&#13;
        fields.payload = {&#13;
            summary: params.eventname,&#13;
            source: params.hostname + ' : ' + params.hostip,&#13;
            severity: severityMapping[params.severity],&#13;
            custom_details: {&#13;
                'Event date': params.eventdate,&#13;
                'Event time': params.eventtime,&#13;
                'Trigger description': params.triggerdesc,&#13;
                'Trigger opdata': params.triggeropdata,&#13;
                'Event tags': params.eventtags,&#13;
                'Event host': params.hostname,&#13;
                'Event host ip': params.hostip&#13;
            }&#13;
        };&#13;
        fields.links = [{&#13;
            href: params.url + '/tr_events.php?triggerid=' + params.triggerid + '&amp;eventid=' + params.eventid,&#13;
            text: 'Event link'&#13;
        }];&#13;
        fields.client = 'Zabbix';&#13;
        fields.client_url = params.url;&#13;
    }&#13;
    else if ((params.eventvalue == 1) &amp;&amp; (params.eventupdate == 1) &amp;&amp; (params.eventack == 'Yes'))&#13;
        fields.event_action = 'acknowledge';&#13;
    else if (params.eventvalue == 0)&#13;
        fields.event_action = 'resolve';&#13;
    else&#13;
        throw 'incorrect values. Update message without ack will not be sent.';&#13;
&#13;
    Zabbix.Log(4, '[PagerDuty Webhook] Sending request:' + JSON.stringify(fields));&#13;
    resp = req.Post('https://events.pagerduty.com/v2/enqueue',&#13;
        JSON.stringify(fields)&#13;
    );&#13;
    Zabbix.Log(4, '[PagerDuty Webhook] Receiving response:' + resp);&#13;
&#13;
    try {&#13;
        resp = JSON.parse(resp);&#13;
    }&#13;
    catch (error) {&#13;
        throw 'incorrect response. PagerDuty returned a non-JSON object.';&#13;
    }&#13;
&#13;
    if (req.Status() != 202) {&#13;
        if (typeof resp === 'object' &amp;&amp; typeof resp.errors === 'object' &amp;&amp; typeof resp.errors[0] === 'string') {&#13;
            throw resp.errors[0];&#13;
        }&#13;
        else {&#13;
            throw 'Unknown error.';&#13;
        }&#13;
    }&#13;
&#13;
    if (resp.status != 'success') {&#13;
        throw 'Unknown error.';&#13;
    }&#13;
&#13;
    return 'OK';&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[PagerDuty Webhook] Notification failed : ' + error);&#13;
    throw 'PagerDuty notification failed : ' + error;&#13;
}</script>
            <show_event_menu>NO</show_event_menu>
            <description>Please refer to https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2 and https://www.zabbix.com/documentation/current/manual/config/notifications/media/webhook#example_scripts.&#13;
  &#13;
Set global macro {$ZABBIX.URL} with your Zabbix server URL.&#13;
Add a dedicated user with the media type &quot;PagerDuty&quot; and place the integration key in the &quot;token&quot; parameter to integrate into the service.</description>
        </media_type>
    </media_types>
</zabbix_export>
