<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>4.4</version>
    <date>2019-12-10T05:43:47Z</date>
    <media_types>
        <media_type>
            <name>Mattermost</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>zabbix_url</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
                <parameter>
                    <name>bot_token</name>
                    <value>&lt;YOUR BOT TOKEN&gt;</value>
                </parameter>
                <parameter>
                    <name>mattermost_url</name>
                    <value>&lt;YOUR MATTERMOST URL&gt;</value>
                </parameter>
                <parameter>
                    <name>send_mode</name>
                    <value>alarm</value>
                </parameter>
                <parameter>
                    <name>send_to</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>event_tags</name>
                    <value>{EVENT.TAGS}</value>
                </parameter>
                <parameter>
                    <name>event_name</name>
                    <value>{EVENT.NAME}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_ack_status</name>
                    <value>{EVENT.ACK.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_date</name>
                    <value>{EVENT.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_time</name>
                    <value>{EVENT.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_severity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_opdata</name>
                    <value>{EVENT.OPDATA}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_update_message</name>
                    <value>{EVENT.UPDATE.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
                <parameter>
                    <name>trigger_description</name>
                    <value>{TRIGGER.DESCRIPTION}</value>
                </parameter>
                <parameter>
                    <name>host_name</name>
                    <value>{HOST.NAME}</value>
                </parameter>
                <parameter>
                    <name>host_ip</name>
                    <value>{HOST.IP}</value>
                </parameter>
                <parameter>
                    <name>event_update_date</name>
                    <value>{EVENT.UPDATE.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_update_time</name>
                    <value>{EVENT.UPDATE.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_date</name>
                    <value>{EVENT.RECOVERY.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_time</name>
                    <value>{EVENT.RECOVERY.TIME}</value>
                </parameter>
            </parameters>
            <attempts>1</attempts>
            <script>var SEVERITY_COLORS = [&#13;
    '#97AAB3', '#7499FF', '#FFC859',&#13;
    '#FFA059', '#E97659', '#E45959'&#13;
    ];&#13;
&#13;
var RESOLVE_COLOR = '#009900';&#13;
&#13;
var SEND_MODE_HANDLERS = {&#13;
    alarm: handlerAlarm,&#13;
    event: handlerEvent&#13;
};&#13;
&#13;
var EVENT_STATUS = {&#13;
    PROBLEM: 'PROBLEM',&#13;
    UPDATE: 'UPDATE',&#13;
    RESOLVE: 'OK'&#13;
}&#13;
&#13;
if (!String.prototype.format) {&#13;
    String.prototype.format = function() {&#13;
        var args = arguments;&#13;
        return this.replace(/{(\d+)}/g, function(match, number) { &#13;
            return number in args&#13;
                ? args[number]&#13;
                : match&#13;
            ;&#13;
        });&#13;
    };&#13;
}&#13;
&#13;
function isEventProblem(params) {&#13;
    return params.event_value == 1&#13;
        &amp;&amp; params.event_update_status == 0&#13;
        ;&#13;
}&#13;
&#13;
function isEventUpdate(params) {&#13;
    return params.event_value == 1&#13;
        &amp;&amp; params.event_update_status == 1&#13;
        ;&#13;
}&#13;
&#13;
function isEventResolve(params) {&#13;
    return params.event_value == 0;&#13;
}&#13;
&#13;
function getPermalink(mattermostURL, teamName, postID) {&#13;
    return '{0}/{1}/pl/{2}'.format(&#13;
        mattermostURL.replace(/\/+$/, ''),&#13;
        teamName,&#13;
        postID&#13;
        );&#13;
}&#13;
&#13;
function getChannel(sendTo) {&#13;
    switch (true) {&#13;
        case /.+\/#.+/.test(sendTo):&#13;
            return getChannelByName(sendTo);&#13;
&#13;
        case /@.+/.test(sendTo):&#13;
            return getDirectChannel(sendTo);&#13;
&#13;
        default:&#13;
            return getChannelByID(sendTo);&#13;
    }&#13;
}&#13;
&#13;
function getChannelByName(sendTo) {&#13;
    var teamChan = sendTo.trim().split('/#');&#13;
&#13;
    var resp = JSON.parse(req.Get(&#13;
        Mattermost.channelByName.format(teamChan[0], teamChan[1]),&#13;
        JSON.stringify(fields)&#13;
        )&#13;
    );&#13;
&#13;
    if (req.Status() != 200) {&#13;
        throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
    }&#13;
&#13;
    return resp;&#13;
}&#13;
&#13;
function getDirectChannel(sendTo) {&#13;
    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(arguments)&#13;
        ));&#13;
&#13;
    var teamUser = sendTo.trim().split('/@');&#13;
    var bot = getBotUser();&#13;
    var user = getUserByName(teamUser[1])&#13;
&#13;
    var resp = JSON.parse(req.Post(&#13;
        Mattermost.directChannel,&#13;
        JSON.stringify([bot.id, user.id])&#13;
        )&#13;
    );&#13;
&#13;
    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(resp)&#13;
        ));&#13;
&#13;
    if (req.Status() != 201) {&#13;
        throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
    }&#13;
&#13;
    resp.teamName = teamUser[0];&#13;
    return resp;&#13;
}&#13;
&#13;
function getChannelByID(channelID) {&#13;
    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(arguments)&#13;
        ));&#13;
&#13;
    var resp = JSON.parse(req.Get(&#13;
        Mattermost.getChannel.format(channelID),&#13;
        JSON.stringify(fields)&#13;
        )&#13;
    );&#13;
&#13;
    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(resp)&#13;
        ));&#13;
&#13;
    if (req.Status() != 200) {&#13;
        throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
    }&#13;
&#13;
    return resp;&#13;
}&#13;
&#13;
function getBotUser() {&#13;
    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(arguments)&#13;
        ));&#13;
&#13;
    var resp = JSON.parse(req.Get(&#13;
        Mattermost.botUser,&#13;
        JSON.stringify(fields)&#13;
        )&#13;
    );&#13;
&#13;
    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(resp)&#13;
        ));&#13;
&#13;
    if (req.Status() != 200) {&#13;
        throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
    }&#13;
&#13;
    return resp;&#13;
}&#13;
&#13;
function getUserByName(userName) {&#13;
    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(arguments)&#13;
        ));&#13;
&#13;
    var resp = JSON.parse(req.Get(&#13;
        Mattermost.userByName.format(userName),&#13;
        JSON.stringify(fields)&#13;
        )&#13;
    );&#13;
&#13;
    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(resp)&#13;
        ));&#13;
&#13;
    if (req.Status() != 200) {&#13;
        throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
    }&#13;
&#13;
    return resp;&#13;
}&#13;
&#13;
function getTeamByID(teamID) {&#13;
    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(arguments)&#13;
        ));&#13;
&#13;
    var resp = JSON.parse(req.Get(&#13;
        Mattermost.getTeam.format(teamID),&#13;
        JSON.stringify(fields)&#13;
        )&#13;
    );&#13;
&#13;
    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&#13;
        arguments.callee.name,&#13;
        JSON.stringify(resp)&#13;
        ));&#13;
&#13;
    if (req.Status() != 200) {&#13;
        throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
    }&#13;
&#13;
    return resp;&#13;
}&#13;
&#13;
function createProblemURL(zabbixURL, triggerId, eventId) {&#13;
    var problemURL = '{0}/tr_events.php?triggerid={1}&amp;eventid={2}'&#13;
        .format(&#13;
            zabbixURL,&#13;
            triggerId,&#13;
            eventId&#13;
        );&#13;
&#13;
    return problemURL&#13;
}&#13;
&#13;
function getTagValue(eventTags, key) {&#13;
    var pattern = new RegExp('(' + key + ':.+)');&#13;
    var tagValue = eventTags&#13;
        .split(',')&#13;
        .filter(function (v) {return v.match(pattern)})&#13;
        .map(function (v) {return v.split(':')[1]})[0]&#13;
        || 0;&#13;
&#13;
    return tagValue;&#13;
}&#13;
&#13;
function handlerAlarm(req, params) {&#13;
    var channel = getChannel(params.send_to);&#13;
    var fields = {&#13;
        channel_id: channel.id,&#13;
        props: {}&#13;
    }&#13;
&#13;
    if (isEventProblem(params)) {&#13;
        var teamName = channel.teamName&#13;
            ? channel.teamName&#13;
            : getTeamByID(channel.team_id).name&#13;
&#13;
        fields.props.attachments = [&#13;
            createMessage(&#13;
                EVENT_STATUS.PROBLEM,&#13;
                SEVERITY_COLORS[params.event_nseverity] || 0,&#13;
                params.event_date,&#13;
                params.event_time,&#13;
                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&#13;
                )&#13;
            ];&#13;
&#13;
        var resp = JSON.parse(req.Post(&#13;
            Mattermost.postMessage,&#13;
            JSON.stringify(fields)&#13;
            )&#13;
        );&#13;
&#13;
        if (req.Status() != 201) {&#13;
            throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
        }&#13;
&#13;
        result.tags.__mattermost_post_id = resp.id;&#13;
        result.tags.__mattermost_channel_id = channel.id;&#13;
        result.tags.__mattermost_channel_name = channel.name;&#13;
        result.tags.__mattermost_message_link = getPermalink(&#13;
            params.mattermost_url,&#13;
            teamName,&#13;
            resp.id&#13;
            );&#13;
&#13;
    } else if (isEventUpdate(params)) {&#13;
        fields.root_id = getTagValue(params.event_tags, 'mattermost_post_id');&#13;
        fields.message = params.event_update_message || '';&#13;
        fields.props.attachments = [&#13;
            createMessage(&#13;
                EVENT_STATUS.UPDATE,&#13;
                SEVERITY_COLORS[params.event_nseverity] || 0,&#13;
                params.event_update_date,&#13;
                params.event_update_time,&#13;
                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&#13;
                true&#13;
                )&#13;
            ];&#13;
&#13;
        var resp = JSON.parse(req.Post(&#13;
            Mattermost.postMessage, JSON.stringify(fields)&#13;
            )&#13;
        );&#13;
&#13;
        if (req.Status() != 201) {&#13;
            throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
        }&#13;
&#13;
    } else if (isEventResolve(params)) {&#13;
        fields.channel_id = getTagValue(params.event_tags, 'mattermost_channel_id');&#13;
        fields.id = getTagValue(params.event_tags, 'mattermost_post_id');&#13;
        fields.props.attachments = [&#13;
            createMessage(&#13;
                EVENT_STATUS.RESOLVE,&#13;
                RESOLVE_COLOR,&#13;
                params.event_date,&#13;
                params.event_time,&#13;
                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&#13;
                )&#13;
            ];&#13;
&#13;
        var post_id = getTagValue(params.event_tags, 'mattermost_post_id');&#13;
&#13;
        var resp = JSON.parse(req.Put(&#13;
            Mattermost.chatUpdate.format(post_id),&#13;
            JSON.stringify(fields)&#13;
            )&#13;
        );&#13;
&#13;
        if (req.Status() != 200) {&#13;
            throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
function handlerEvent(req, params) {&#13;
    var channel = getChannel(params.send_to);&#13;
    var fields = {&#13;
        channel_id: channel.id,&#13;
        props: {}&#13;
    }&#13;
&#13;
    if (isEventProblem(params)) {&#13;
        var teamName = channel.teamName&#13;
            ? channel.teamName&#13;
            : getTeamByID(channel.team_id).name&#13;
&#13;
        fields.props.attachments = [&#13;
            createMessage(&#13;
                EVENT_STATUS.PROBLEM,&#13;
                SEVERITY_COLORS[params.event_nseverity] || 0,&#13;
                params.event_date,&#13;
                params.event_time,&#13;
                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&#13;
                )&#13;
            ];&#13;
&#13;
        var resp = JSON.parse(req.Post(Mattermost.postMessage, JSON.stringify(fields)));&#13;
        if (req.Status() != 201) {&#13;
            throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
        }&#13;
&#13;
        result.tags.__mattermost_channel_name = channel.name;&#13;
        result.tags.__mattermost_message_link = getPermalink(&#13;
            params.mattermost_url,&#13;
            teamName,&#13;
            resp.id&#13;
            );&#13;
    &#13;
    } else if (isEventUpdate(params)) {&#13;
        fields.message = params.event_update_message || '';&#13;
        fields.props.attachments = [&#13;
            createMessage(&#13;
                EVENT_STATUS.UPDATE,&#13;
                SEVERITY_COLORS[params.event_nseverity] || 0,&#13;
                params.event_update_date,&#13;
                params.event_update_time,&#13;
                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&#13;
                false&#13;
                )&#13;
            ];&#13;
&#13;
        var resp = JSON.parse(req.Post(Mattermost.postMessage, JSON.stringify(fields)));&#13;
        if (req.Status() != 201) {&#13;
            throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
        }&#13;
&#13;
    } else if (isEventResolve(params)) {&#13;
        fields.props.attachments = [&#13;
            createMessage(&#13;
                EVENT_STATUS.RESOLVE,&#13;
                RESOLVE_COLOR,&#13;
                params.event_recovery_date,&#13;
                params.event_recovery_time,&#13;
                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&#13;
                )&#13;
            ];&#13;
&#13;
        var resp = JSON.parse(req.Post(Mattermost.postMessage, JSON.stringify(fields)));&#13;
        if (req.Status() != 201) {&#13;
            throw '[{0}] {1}'.format(resp.status_code, resp.message);&#13;
        }&#13;
    }&#13;
}   &#13;
&#13;
function createMessage(&#13;
    status,&#13;
    eventSeverityColor,&#13;
    eventDate,&#13;
    eventTime,&#13;
    problemURL,&#13;
    isShort&#13;
    ) {&#13;
    var message = {&#13;
        fallbac: '{0} #{1}: {2}'.format(status, params.event_id, params.event_name),&#13;
        title: '{0} #{1}: {2}'.format(status, params.event_id, params.event_name),&#13;
        color: eventSeverityColor,&#13;
        title_link: problemURL,&#13;
        footer: problemURL,&#13;
        &#13;
        fields: [&#13;
            {&#13;
                title: 'Host',&#13;
                value: '{0} [{1}]'.format(params.host_name, params.host_ip),&#13;
                short: true&#13;
            },&#13;
            {&#13;
                title: 'Event time',&#13;
                value: '{0} {1}'.format(eventDate, eventTime),&#13;
                short: true&#13;
            },&#13;
            {&#13;
                title: 'Severity',&#13;
                value: params.event_severity,&#13;
                short: true&#13;
            },&#13;
            {&#13;
                title: 'Opdata',&#13;
                value: params.event_opdata,&#13;
                short: true&#13;
            }&#13;
        ],&#13;
    };&#13;
&#13;
    if (!isShort) {&#13;
        message.fields.push(&#13;
            {&#13;
                title: 'Event tags',&#13;
                value: '`{0}`'.format(params.event_tags.replace(/__.+?:(.+?,|.+)/g, '') || 'None'),&#13;
                short: true&#13;
            },&#13;
            {&#13;
                title: 'Trigger description',&#13;
                value: params.trigger_description,&#13;
                short: true&#13;
            }&#13;
            )&#13;
    }&#13;
&#13;
    return message;&#13;
}&#13;
&#13;
try {&#13;
    var params = JSON.parse(value),&#13;
        req = new CurlHttpRequest(),&#13;
        fields = {},&#13;
        result = {tags: {}};&#13;
&#13;
&#13;
    req.AddHeader('Content-Type: application/json; charset=utf-8');&#13;
    req.AddHeader('Authorization: Bearer ' + params.bot_token)&#13;
&#13;
    params.mattermost_url = params.mattermost_url.replace(/\/+$/, '');&#13;
    params.zabbix_url = params.zabbix_url.replace(/\/+$/, '');&#13;
    &#13;
    var APIEndpoint = params.mattermost_url + '/api/v4/';&#13;
&#13;
    var Mattermost = {&#13;
        postMessage: APIEndpoint + 'posts',&#13;
        getChannel: APIEndpoint + 'channels/{0}',&#13;
        getTeam: APIEndpoint + 'teams/{0}',&#13;
        chatUpdate: APIEndpoint + 'posts/{0}',&#13;
        directChannel: APIEndpoint + 'channels/direct',&#13;
        channelByName: APIEndpoint + 'teams/name/{0}/channels/name/{1}',&#13;
        userByName: APIEndpoint + 'users/username/{0}',&#13;
        botUser: APIEndpoint + 'users/me'&#13;
&#13;
    }&#13;
&#13;
    params.send_mode = params.send_mode.toLowerCase();&#13;
    params.send_mode = params.send_mode in SEND_MODE_HANDLERS&#13;
        ? params.send_mode&#13;
        : 'alarm';&#13;
&#13;
    SEND_MODE_HANDLERS[params.send_mode](req, params);&#13;
    return JSON.stringify(result);&#13;
&#13;
} catch (error) {&#13;
    Zabbix.Log(5, 'Mattermost notification failed: ' + error);&#13;
    throw 'Mattermost notification failed: ' + error;&#13;
}</script>
            <process_tags>YES</process_tags>
            <show_event_menu>YES</show_event_menu>
            <event_menu_url>{EVENT.TAGS.__mattermost_message_link}</event_menu_url>
            <event_menu_name>Open in Mattermost: {EVENT.TAGS.__mattermost_channel_name}</event_menu_name>
        </media_type>
    </media_types>
</zabbix_export>
