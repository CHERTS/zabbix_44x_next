<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export>
    <version>4.4</version>
    <date>2020-01-27T16:32:25Z</date>
    <media_types>
        <media_type>
            <name>Discord</name>
            <type>WEBHOOK</type>
            <parameters>
                <parameter>
                    <name>zabbix_url</name>
                    <value>{$ZABBIX.URL}</value>
                </parameter>
                <parameter>
                    <name>discord_endpoint</name>
                    <value>{ALERT.SENDTO}</value>
                </parameter>
                <parameter>
                    <name>use_default_message</name>
                    <value>false</value>
                </parameter>
                <parameter>
                    <name>alert_message</name>
                    <value>{ALERT.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>alert_subject</name>
                    <value>{ALERT.SUBJECT}</value>
                </parameter>
                <parameter>
                    <name>event_name</name>
                    <value>{EVENT.NAME}</value>
                </parameter>
                <parameter>
                    <name>event_id</name>
                    <value>{EVENT.ID}</value>
                </parameter>
                <parameter>
                    <name>event_severity</name>
                    <value>{EVENT.SEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_nseverity</name>
                    <value>{EVENT.NSEVERITY}</value>
                </parameter>
                <parameter>
                    <name>event_opdata</name>
                    <value>{EVENT.OPDATA}</value>
                </parameter>
                <parameter>
                    <name>event_tags</name>
                    <value>{EVENT.TAGS}</value>
                </parameter>
                <parameter>
                    <name>event_time</name>
                    <value>{EVENT.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_date</name>
                    <value>{EVENT.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_date</name>
                    <value>{EVENT.RECOVERY.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_recovery_time</name>
                    <value>{EVENT.RECOVERY.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_update_date</name>
                    <value>{EVENT.UPDATE.DATE}</value>
                </parameter>
                <parameter>
                    <name>event_update_time</name>
                    <value>{EVENT.UPDATE.TIME}</value>
                </parameter>
                <parameter>
                    <name>event_update_action</name>
                    <value>{EVENT.UPDATE.ACTION}</value>
                </parameter>
                <parameter>
                    <name>event_update_message</name>
                    <value>{EVENT.UPDATE.MESSAGE}</value>
                </parameter>
                <parameter>
                    <name>event_update_status</name>
                    <value>{EVENT.UPDATE.STATUS}</value>
                </parameter>
                <parameter>
                    <name>event_update_user</name>
                    <value>{USER.FULLNAME}</value>
                </parameter>
                <parameter>
                    <name>event_value</name>
                    <value>{EVENT.VALUE}</value>
                </parameter>
                <parameter>
                    <name>host_ip</name>
                    <value>{HOST.IP}</value>
                </parameter>
                <parameter>
                    <name>host_name</name>
                    <value>{HOST.NAME}</value>
                </parameter>
                <parameter>
                    <name>trigger_description</name>
                    <value>{TRIGGER.DESCRIPTION}</value>
                </parameter>
                <parameter>
                    <name>trigger_id</name>
                    <value>{TRIGGER.ID}</value>
                </parameter>
            </parameters>
            <script>var SEVERITY_COLORS = [&#13;
    '#97AAB3', // Not classified.&#13;
    '#7499FF', // Information.&#13;
    '#FFC859', // Warning.&#13;
    '#FFA059', // Average.&#13;
    '#E97659', // High.&#13;
    '#E45959', // Disaster.&#13;
    '#009900'  // Resolved.&#13;
];&#13;
&#13;
function stringTruncate(str, len) {&#13;
    return str.length &gt; len ? str.substring(0, len - 3) + '...' : str;&#13;
}&#13;
&#13;
try {&#13;
    Zabbix.Log(4, '[ Discord Webhook ] Executed with params: ' + value);&#13;
&#13;
    var params = JSON.parse(value);&#13;
&#13;
    if (!params.discord_endpoint) {&#13;
        throw 'Cannot get discord_endpoint';&#13;
    }&#13;
    else if (!params.discord_endpoint.startsWith('https://discordapp.com/api/webhooks')) {&#13;
        throw 'Invalid Discord webhook URL: ' + params.discord_endpoint;&#13;
    }&#13;
    else {&#13;
        params.discord_endpoint = params.discord_endpoint.replace('/api/', '/api/v1000/') + '?wait=True';&#13;
    }&#13;
&#13;
    params.zabbix_url = (params.zabbix_url.endsWith('/'))&#13;
        ? params.zabbix_url.slice(0, -1) : params.zabbix_url;&#13;
&#13;
    if (!(params.event_value == 0 || params.event_value == 1)) {&#13;
        throw 'Incorrect &quot;event_value&quot; parameter given: ' + params.event_value + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if (!(params.event_update_status == 0 || params.event_update_status == 1)) {&#13;
        throw 'Incorrect &quot;event_update_status&quot; parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&#13;
    }&#13;
&#13;
    if (params.event_value == 0) {&#13;
        params.event_nseverity = '6';&#13;
    }&#13;
&#13;
    if (!SEVERITY_COLORS[params.event_nseverity]) {&#13;
        throw 'Incorrect &quot;event_nseverity&quot; parameter given: ' + params.event_nseverity + '\nMust be 0-5.';&#13;
    }&#13;
&#13;
    var color = parseInt(SEVERITY_COLORS[params.event_nseverity].replace('#', ''), 16),&#13;
        fields = [],&#13;
        body = {&#13;
            embeds: [&#13;
                {&#13;
                    color: color || 0,&#13;
                    url: params.zabbix_url + '/tr_events.php?triggerid=' +&#13;
                        params.trigger_id + '&amp;eventid=' + params.event_id&#13;
                }&#13;
            ]&#13;
        };&#13;
&#13;
    // Default message from {ALERT.MESSAGE}.&#13;
    if (params.use_default_message.toLowerCase() == 'true') {&#13;
        body.embeds[0].title = stringTruncate(params.alert_subject, 256);&#13;
        body.embeds[0].description = stringTruncate(params.alert_message, 2048);&#13;
    }&#13;
    else {&#13;
        fields.push(&#13;
            {&#13;
                name: 'Host',&#13;
                value: params.host_name + ' [' + params.host_ip + ']'&#13;
            }&#13;
        );&#13;
&#13;
        // Resolved message.&#13;
        if (params.event_value == 0) {&#13;
            body.embeds[0].title = stringTruncate('OK: ' + params.event_name, 256);&#13;
            fields.push(&#13;
                {&#13;
                    name: 'Revovery time',&#13;
                    value: params.event_recovery_time + ' ' + params.event_recovery_date,&#13;
                    inline: 'True'&#13;
                }&#13;
            );&#13;
        }&#13;
&#13;
        // Problem message.&#13;
        else if (params.event_update_status == 0) {&#13;
            body.embeds[0].title = stringTruncate('PROBLEM: ' + params.event_name, 256);&#13;
            fields.push(&#13;
                {&#13;
                    name: 'Event time',&#13;
                    value: params.event_time + ' ' + params.event_date,&#13;
                    inline: 'True'&#13;
                }&#13;
            );&#13;
        }&#13;
&#13;
        // Update message.&#13;
        else if (params.event_update_status == 1) {&#13;
            body.embeds[0].title = stringTruncate('UPDATE: ' + params.event_name, 256);&#13;
            body.embeds[0].description = params.event_update_user + ' ' + params.event_update_action + '.';&#13;
&#13;
            if (params.event_update_message) {&#13;
                body.embeds[0].description += ' Comment:\n&gt;&gt;&gt; ' + params.event_update_message;&#13;
            }&#13;
&#13;
            body.embeds[0].description = stringTruncate(body.embeds[0].description, 2048);&#13;
&#13;
            fields.push(&#13;
                {&#13;
                    name: 'Event update time',&#13;
                    value: params.event_update_time + ' ' + params.event_update_date,&#13;
                    inline: 'True'&#13;
                }&#13;
            );&#13;
        }&#13;
&#13;
        fields.push(&#13;
            {&#13;
                name: 'Severity',&#13;
                value: params.event_severity,&#13;
                inline: 'True'&#13;
            }&#13;
        );&#13;
&#13;
        if (params.event_opdata) {&#13;
            fields.push(&#13;
                {&#13;
                    name: 'Operational data',&#13;
                    value: stringTruncate(params.event_opdata, 1024),&#13;
                    inline: 'True'&#13;
                }&#13;
            );&#13;
        }&#13;
&#13;
        if (params.event_value == 1 &amp;&amp; params.event_update_status == 0 &amp;&amp; params.trigger_description) {&#13;
            fields.push(&#13;
                {&#13;
                    name: 'Trigger description',&#13;
                    value: stringTruncate(params.trigger_description, 1024)&#13;
                }&#13;
            );&#13;
        }&#13;
&#13;
        body.embeds[0].footer = {&#13;
            text: 'Event ID: ' + params.event_id&#13;
        };&#13;
&#13;
        if (params.event_tags) {&#13;
            body.embeds[0].footer.text += '\nEvent tags: ' + params.event_tags;&#13;
        }&#13;
        body.embeds[0].footer.text = stringTruncate(body.embeds[0].footer.text, 2048);&#13;
    }&#13;
&#13;
    if (fields.length &gt; 0) {&#13;
        body.embeds[0].fields = fields;&#13;
    }&#13;
&#13;
    var req = new CurlHttpRequest();&#13;
&#13;
    req.AddHeader('Content-Type: application/json');&#13;
&#13;
    var resp = req.Post(params.discord_endpoint, JSON.stringify(body)),&#13;
        data = JSON.parse(resp);&#13;
&#13;
    Zabbix.Log(4, '[ Discord Webhook ] JSON: ' + JSON.stringify(body));&#13;
    Zabbix.Log(4, '[ Discord Webhook ] Response: ' + resp);&#13;
&#13;
    if (data.id) {&#13;
        return resp;&#13;
    }&#13;
    else {&#13;
        var message = ((typeof data.message === 'string') ? data.message : 'Unknown error');&#13;
&#13;
        Zabbix.Log(3, '[ Discord Webhook ] FAILED with response: ' + resp);&#13;
        throw message + '. For more details check zabbix server log.';&#13;
    }&#13;
}&#13;
catch (error) {&#13;
    Zabbix.Log(3, '[ Discord Webhook ] ERROR: ' + error);&#13;
    throw 'Sending failed: ' + error;&#13;
}</script>
            <show_event_menu>NO</show_event_menu>
        </media_type>
    </media_types>
</zabbix_export>
