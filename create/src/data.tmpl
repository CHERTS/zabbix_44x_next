--
-- Zabbix
-- Copyright (C) 2001-2020 Zabbix SIA
--
-- This program is free software; you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation; either version 2 of the License, or
-- (at your option) any later version.
--
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
-- GNU General Public License for more details.
--
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
--

TABLE |users
FIELDS|userid|alias|name  |surname      |passwd                          |url |autologin|autologout|lang |refresh|type|theme  |rows_per_page|
ROW   |1     |Admin|Zabbix|Administrator|5fce1b3e34b520afeffb37ce08c7cd66|    |1        |0         |en_GB|30s    |3   |default|50           |
ROW   |2     |guest|      |             |d41d8cd98f00b204e9800998ecf8427e|    |0        |15m       |en_GB|30s    |1   |default|50           |

TABLE |hstgrp
FIELDS|groupid|name                       |internal|flags|
ROW   |1      |Templates                  |0       |0    |
ROW   |2      |Linux servers              |0       |0    |
ROW   |4      |Zabbix servers             |0       |0    |
ROW   |5      |Discovered hosts           |1       |0    |
ROW   |6      |Virtual machines           |0       |0    |
ROW   |7      |Hypervisors                |0       |0    |
ROW   |8      |Templates/Modules          |0       |0    |
ROW   |9      |Templates/Network devices  |0       |0    |
ROW   |10     |Templates/Operating systems|0       |0    |
ROW   |11     |Templates/Server hardware  |0       |0    |
ROW   |12     |Templates/Applications     |0       |0    |
ROW   |13     |Templates/Databases        |0       |0    |
ROW   |14     |Templates/Virtualization   |0       |0    |

TABLE |drules
FIELDS|druleid|proxy_hostid|name         |iprange        |delay|status|
ROW   |2      |NULL        |Local network|192.168.0.1-254|1h   |1     |

TABLE |dchecks
FIELDS|dcheckid|druleid|type|key_        |snmp_community|ports|snmpv3_securityname|snmpv3_securitylevel|snmpv3_authpassphrase|snmpv3_privpassphrase|uniq|snmpv3_authprotocol|snmpv3_privprotocol|snmpv3_contextname|host_source|name_source|
ROW   |2       |2      |9   |system.uname|              |10050|                   |0                   |                     |                     |0   |0                  |0                  |                  |1          |0          |

TABLE |media_type
FIELDS|mediatypeid|type|name      |smtp_server     |smtp_helo  |smtp_email        |exec_path|gsm_modem |username|passwd|status|smtp_port|smtp_security|smtp_verify_peer|smtp_verify_host|smtp_authentication|exec_params|maxsessions|maxattempts|attempt_interval|content_type|script|timeout|process_tags|show_event_menu|event_menu_url                        |event_menu_name                                           |description|
ROW   |1          |0   |Email     |mail.example.com|example.com|zabbix@example.com|         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |0           ||30s    |0           |0              |                                      |                                                          ||
ROW   |3          |2   |SMS       |                |           |                  |         |/dev/ttyS0|        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           ||30s    |0           |0              |                                      |                                                          ||
ROW   |4          |4   |Mattermost|                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |1          |10s             |1           |var SEVERITY_COLORS = [&eol;    '#97AAB3', '#7499FF', '#FFC859',&eol;    '#FFA059', '#E97659', '#E45959'&eol;    ];&eol;&eol;var RESOLVE_COLOR = '#009900';&eol;&eol;var SEND_MODE_HANDLERS = {&eol;    alarm: handlerAlarm,&eol;    event: handlerEvent&eol;};&eol;&eol;var EVENT_STATUS = {&eol;    PROBLEM: 'PROBLEM',&eol;    UPDATE: 'UPDATE',&eol;    RESOLVE: 'OK'&eol;}&eol;&eol;if (!String.prototype.format) {&eol;    String.prototype.format = function() {&eol;        var args = arguments;&eol;        return this.replace(/{(\d+)}/g, function(match, number) { &eol;            return number in args&eol;                ? args[number]&eol;                : match&eol;            ;&eol;        });&eol;    };&eol;}&eol;&eol;function isEventProblem(params) {&eol;    return params.event_value == 1&eol;        && params.event_update_status == 0&eol;        ;&eol;}&eol;&eol;function isEventUpdate(params) {&eol;    return params.event_value == 1&eol;        && params.event_update_status == 1&eol;        ;&eol;}&eol;&eol;function isEventResolve(params) {&eol;    return params.event_value == 0;&eol;}&eol;&eol;function getPermalink(mattermostURL, teamName, postID) {&eol;    return '{0}/{1}/pl/{2}'.format(&eol;        mattermostURL.replace(/\/+$/, ''),&eol;        teamName,&eol;        postID&eol;        );&eol;}&eol;&eol;function getChannel(sendTo) {&eol;    switch (true) {&eol;        case /.+\/#.+/.test(sendTo):&eol;            return getChannelByName(sendTo);&eol;&eol;        case /@.+/.test(sendTo):&eol;            return getDirectChannel(sendTo);&eol;&eol;        default:&eol;            return getChannelByID(sendTo);&eol;    }&eol;}&eol;&eol;function getChannelByName(sendTo) {&eol;    var teamChan = sendTo.trim().split('/#');&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.channelByName.format(teamChan[0], teamChan[1]),&eol;        JSON.stringify(fields)&eol;        )&eol;    );&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getDirectChannel(sendTo) {&eol;    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;        ));&eol;&eol;    var teamUser = sendTo.trim().split('/@');&eol;    var bot = getBotUser();&eol;    var user = getUserByName(teamUser[1])&eol;&eol;    var resp = JSON.parse(req.Post(&eol;        Mattermost.directChannel,&eol;        JSON.stringify([bot.id, user.id])&eol;        )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;        ));&eol;&eol;    if (req.Status() != 201) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    resp.teamName = teamUser[0];&eol;    return resp;&eol;}&eol;&eol;function getChannelByID(channelID) {&eol;    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;        ));&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.getChannel.format(channelID),&eol;        JSON.stringify(fields)&eol;        )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;        ));&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getBotUser() {&eol;    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;        ));&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.botUser,&eol;        JSON.stringify(fields)&eol;        )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;        ));&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getUserByName(userName) {&eol;    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;        ));&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.userByName.format(userName),&eol;        JSON.stringify(fields)&eol;        )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;        ));&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function getTeamByID(teamID) {&eol;    Zabbix.Log(5, '[ Webhook ] Call {0}({1})'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(arguments)&eol;        ));&eol;&eol;    var resp = JSON.parse(req.Get(&eol;        Mattermost.getTeam.format(teamID),&eol;        JSON.stringify(fields)&eol;        )&eol;    );&eol;&eol;    Zabbix.Log(5, '[ Webhook ] Result {0}: {1}'.format(&eol;        arguments.callee.name,&eol;        JSON.stringify(resp)&eol;        ));&eol;&eol;    if (req.Status() != 200) {&eol;        throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;    }&eol;&eol;    return resp;&eol;}&eol;&eol;function createProblemURL(zabbixURL, triggerId, eventId) {&eol;    var problemURL = '{0}/tr_events.php?triggerid={1}&eventid={2}'&eol;        .format(&eol;            zabbixURL,&eol;            triggerId,&eol;            eventId&eol;        );&eol;&eol;    return problemURL&eol;}&eol;&eol;function getTagValue(eventTags, key) {&eol;    var pattern = new RegExp('(' + key + ':.+)');&eol;    var tagValue = eventTags&eol;        .split(',')&eol;        .filter(function (v) {return v.match(pattern)})&eol;        .map(function (v) {return v.split(':')[1]})[0]&eol;        &pipe;&pipe; 0;&eol;&eol;    return tagValue;&eol;}&eol;&eol;function handlerAlarm(req, params) {&eol;    var channel = getChannel(params.send_to);&eol;    var fields = {&eol;        channel_id: channel.id,&eol;        props: {}&eol;    }&eol;&eol;    if (isEventProblem(params)) {&eol;        var teamName = channel.teamName&eol;            ? channel.teamName&eol;            : getTeamByID(channel.team_id).name&eol;&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.PROBLEM,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;                )&eol;            ];&eol;&eol;        var resp = JSON.parse(req.Post(&eol;            Mattermost.postMessage,&eol;            JSON.stringify(fields)&eol;            )&eol;        );&eol;&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;        result.tags.__mattermost_post_id = resp.id;&eol;        result.tags.__mattermost_channel_id = channel.id;&eol;        result.tags.__mattermost_channel_name = channel.name;&eol;        result.tags.__mattermost_message_link = getPermalink(&eol;            params.mattermost_url,&eol;            teamName,&eol;            resp.id&eol;            );&eol;&eol;    } else if (isEventUpdate(params)) {&eol;        fields.root_id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;        fields.message = params.event_update_message &pipe;&pipe; '';&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.UPDATE,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_update_date,&eol;                params.event_update_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&eol;                true&eol;                )&eol;            ];&eol;&eol;        var resp = JSON.parse(req.Post(&eol;            Mattermost.postMessage, JSON.stringify(fields)&eol;            )&eol;        );&eol;&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;    } else if (isEventResolve(params)) {&eol;        fields.channel_id = getTagValue(params.event_tags, 'mattermost_channel_id');&eol;        fields.id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.RESOLVE,&eol;                RESOLVE_COLOR,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;                )&eol;            ];&eol;&eol;        var post_id = getTagValue(params.event_tags, 'mattermost_post_id');&eol;&eol;        var resp = JSON.parse(req.Put(&eol;            Mattermost.chatUpdate.format(post_id),&eol;            JSON.stringify(fields)&eol;            )&eol;        );&eol;&eol;        if (req.Status() != 200) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;    }&eol;}&eol;&eol;function handlerEvent(req, params) {&eol;    var channel = getChannel(params.send_to);&eol;    var fields = {&eol;        channel_id: channel.id,&eol;        props: {}&eol;    }&eol;&eol;    if (isEventProblem(params)) {&eol;        var teamName = channel.teamName&eol;            ? channel.teamName&eol;            : getTeamByID(channel.team_id).name&eol;&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.PROBLEM,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_date,&eol;                params.event_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;                )&eol;            ];&eol;&eol;        var resp = JSON.parse(req.Post(Mattermost.postMessage, JSON.stringify(fields)));&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;        result.tags.__mattermost_channel_name = channel.name;&eol;        result.tags.__mattermost_message_link = getPermalink(&eol;            params.mattermost_url,&eol;            teamName,&eol;            resp.id&eol;            );&eol;    &eol;    } else if (isEventUpdate(params)) {&eol;        fields.message = params.event_update_message &pipe;&pipe; '';&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.UPDATE,&eol;                SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;                params.event_update_date,&eol;                params.event_update_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&eol;                false&eol;                )&eol;            ];&eol;&eol;        var resp = JSON.parse(req.Post(Mattermost.postMessage, JSON.stringify(fields)));&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;&eol;    } else if (isEventResolve(params)) {&eol;        fields.props.attachments = [&eol;            createMessage(&eol;                EVENT_STATUS.RESOLVE,&eol;                RESOLVE_COLOR,&eol;                params.event_recovery_date,&eol;                params.event_recovery_time,&eol;                createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;                )&eol;            ];&eol;&eol;        var resp = JSON.parse(req.Post(Mattermost.postMessage, JSON.stringify(fields)));&eol;        if (req.Status() != 201) {&eol;            throw '[{0}] {1}'.format(resp.status_code, resp.message);&eol;        }&eol;    }&eol;}   &eol;&eol;function createMessage(&eol;    status,&eol;    eventSeverityColor,&eol;    eventDate,&eol;    eventTime,&eol;    problemURL,&eol;    isShort&eol;    ) {&eol;    var message = {&eol;        fallbac: '{0} #{1}: {2}'.format(status, params.event_id, params.event_name),&eol;        title: '{0} #{1}: {2}'.format(status, params.event_id, params.event_name),&eol;        color: eventSeverityColor,&eol;        title_link: problemURL,&eol;        footer: problemURL,&eol;        &eol;        fields: [&eol;            {&eol;                title: 'Host',&eol;                value: '{0} [{1}]'.format(params.host_name, params.host_ip),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Event time',&eol;                value: '{0} {1}'.format(eventDate, eventTime),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Severity',&eol;                value: params.event_severity,&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Opdata',&eol;                value: params.event_opdata,&eol;                short: true&eol;            }&eol;        ],&eol;    };&eol;&eol;    if (!isShort) {&eol;        message.fields.push(&eol;            {&eol;                title: 'Event tags',&eol;                value: '`{0}`'.format(params.event_tags.replace(/__.+?:(.+?,&pipe;.+)/g, '') &pipe;&pipe; 'None'),&eol;                short: true&eol;            },&eol;            {&eol;                title: 'Trigger description',&eol;                value: params.trigger_description,&eol;                short: true&eol;            }&eol;            )&eol;    }&eol;&eol;    return message;&eol;}&eol;&eol;try {&eol;    var params = JSON.parse(value),&eol;        req = new CurlHttpRequest(),&eol;        fields = {},&eol;        result = {tags: {}};&eol;&eol;&eol;    req.AddHeader('Content-Type: application/json; charset=utf-8');&eol;    req.AddHeader('Authorization: Bearer ' + params.bot_token)&eol;&eol;    params.mattermost_url = params.mattermost_url.replace(/\/+$/, '');&eol;    params.zabbix_url = params.zabbix_url.replace(/\/+$/, '');&eol;    &eol;    var APIEndpoint = params.mattermost_url + '/api/v4/';&eol;&eol;    var Mattermost = {&eol;        postMessage: APIEndpoint + 'posts',&eol;        getChannel: APIEndpoint + 'channels/{0}',&eol;        getTeam: APIEndpoint + 'teams/{0}',&eol;        chatUpdate: APIEndpoint + 'posts/{0}',&eol;        directChannel: APIEndpoint + 'channels/direct',&eol;        channelByName: APIEndpoint + 'teams/name/{0}/channels/name/{1}',&eol;        userByName: APIEndpoint + 'users/username/{0}',&eol;        botUser: APIEndpoint + 'users/me'&eol;&eol;    }&eol;&eol;    params.send_mode = params.send_mode.toLowerCase();&eol;    params.send_mode = params.send_mode in SEND_MODE_HANDLERS&eol;        ? params.send_mode&eol;        : 'alarm';&eol;&eol;    SEND_MODE_HANDLERS[params.send_mode](req, params);&eol;    return JSON.stringify(result);&eol;&eol;} catch (error) {&eol;    Zabbix.Log(5, 'Mattermost notification failed: ' + error);&eol;    throw 'Mattermost notification failed: ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__mattermost_message_link}|Open in Mattermost: {EVENT.TAGS.__mattermost_channel_name}||
ROW   |5          |4   |Opsgenie  |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |try {&eol;  &eol;    var result = {tags: {}},&eol;    params = JSON.parse(value),&eol;    req = new CurlHttpRequest(),&eol;    fields = {},&eol;    url = params.url;&eol;  &eol;    req.AddHeader('Content-Type: application/json');&eol;    req.AddHeader('Authorization: GenieKey '+params.token);&eol;    //Zabbix: 0 - Not classified, 1 - Information, 2 - Warning, 3 - Average, 4 - High, 5 - Disaster.&eol;    //Opsgenie: P5 Informational, P4 Low, P3 Moderate, P2 High, P1 Critical.&eol;    if ((params.severity == 0) &pipe;&pipe; (params.severity == 1))&eol;      severity = "P5";&eol;    else if (params.severity == 2)&eol;      severity = "P4";&eol;    else if (params.severity == 3)&eol;      severity = "P3";&eol;    else if (params.severity == 4)&eol;      severity = "P2";&eol;    else if (params.severity == 5)&eol;      severity = "P1";&eol;&eol;    if ((params.eventvalue == 1) && (params.eventupdate == 0)) {&eol;        fields.message = params.subject;&eol;        fields.alias = params.eventid;&eol;        fields.description = params.message;&eol;        fields.details = {"Zabbix server": params.zbxurl ,"Problem": params.zbxurl+"/tr_events.php?triggerid="+params.triggerid+"&eventid="+params.eventid};&eol;        fields.source = "Zabbix";&eol;        fields.priority = severity;&eol;    }&eol;    else if ((params.eventvalue == 1) && (params.eventupdate == 1)) {&eol;        if (params.eventaction.includes('acknowledged'))&eol;            url = url+"/"+params.eventid+"/acknowledge?identifierType=alias" ;&eol;        else&eol;            url = url+"/"+params.eventid+"/notes?identifierType=alias";&eol;        fields.user = params.user;&eol;        fields.note = params.message;&eol;    }&eol;    else if (params.eventvalue == 0) {&eol;        url = url+"/"+params.eventid+"/close?identifierType=alias" &eol;        fields.note = params.message;&eol;    }&eol;&eol;    var resp = req.Post(url,&eol;        JSON.stringify(fields)&eol;    );&eol;&eol;    if (req.Status() != 202) {&eol;        throw JSON.parse(resp).message;&eol;    }&eol;&eol;    resp = JSON.parse(resp);&eol;&eol;    if ((params.eventvalue == 1) && (params.eventupdate == 0)) {&eol;        url = params.url+"/"+params.eventid+"?identifierType=alias";&eol;        resp = req.Get(url);&eol;        resp = JSON.parse(resp);&eol;        result.tags.opsgenie_issue_key = params.web+"/alert/detail/"+resp.data.id+"/details";&eol;    }&eol;&eol;} catch (error) {&eol;    Zabbix.Log(3, 'Opsgenie notification failed : '+error);&eol;    throw 'Opsgenie notification failed : '+error;&eol;&eol;    result = {};&eol;}&eol;return JSON.stringify(result);|30s    |1           |1              |{EVENT.TAGS.opsgenie_issue_key}       |Alert in Opsgenie                                         |Please refer to https://docs.opsgenie.com/docs/alert-api and https://www.zabbix.com/documentation/current/manual/config/notifications/media/webhook#example_scripts.&eol;  &eol;Set global macro {$ZABBIX.URL} with your Zabbix server URL.&eol;Add dedicated user with media type "Opsgenie".&eol;Change the values of the variables url (https://api.opsgenie.com/v2/alerts or https://api.eu.opsgenie.com/v2/alerts),&eol;web (for example, https://myzabbix.app.opsgenie.com), token|
ROW   |6          |4   |Pushover  |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |0          |3          |10s             |1           |try {&eol;    var params = JSON.parse(value),&eol;        request = new CurlHttpRequest(),&eol;        data,&eol;        response;&eol;&eol;    if (isNaN(params.priority) &pipe;&pipe; params.priority < -2 &pipe;&pipe; params.priority > 2) {&eol;        throw 'field "priority" should be -2..2';&eol;    }&eol;&eol;    if (isNaN(params.triggerid)) {&eol;        throw 'field "triggerid" is not a number';&eol;    }&eol;&eol;    if (isNaN(params.eventid)) {&eol;        throw 'field "eventid" is not a number';&eol;    }&eol;&eol;    if (typeof params.message !== 'string' &pipe;&pipe; params.message.trim() === '') {&eol;        throw 'field "message" cannot be empty';&eol;    }&eol;&eol;    data = {&eol;        token: params.token,&eol;        user: params.user,&eol;        title: params.title,&eol;        message: params.message,&eol;        url: params.url + '/tr_events.php?triggerid=' + params.triggerid + '&eventid=' + params.eventid,&eol;        url_title: params.url_title,&eol;        priority: params.priority&eol;    };&eol;&eol;    if (params.priority == 2) {&eol;        if (isNaN(params.retry) &pipe;&pipe; params.retry < 30) {&eol;            throw 'field "retry" should be a number with value of at least 30 if "priority" is set to 2';&eol;        }&eol;&eol;        if (isNaN(params.expire) &pipe;&pipe; params.expire > 10800) {&eol;            throw 'field "expire" should be a number with value of at most 10800 if "priority" is set to 2';&eol;        }&eol;&eol;        data.retry = params.retry;&eol;        data.expire = params.expire;&eol;    }&eol;&eol;    data = JSON.stringify(data);&eol;    Zabbix.Log(4, '[ Pushover Webhook ] Sending request: ' + params.endpoint + '\n' + data);&eol;&eol;    request.AddHeader('Content-Type: application/json');&eol;    response = request.Post(params.endpoint, data);&eol;&eol;    Zabbix.Log(4, '[ Pushover Webhook ] Received response with status code ' + request.Status() + '\n' + response);&eol;&eol;    if (response !== null) {&eol;        try {&eol;            response = JSON.parse(response);&eol;        }&eol;        catch (error) {&eol;            Zabbix.Log(4, '[ Pushover Webhook ] Failed to parse response received from Pushover');&eol;            response = null;&eol;        }&eol;    }&eol;&eol;    if (request.Status() != 200 &pipe;&pipe; response === null &pipe;&pipe; typeof response !== 'object' &pipe;&pipe; response.status !== 1) {&eol;        if (response !== null && typeof response === 'object' && typeof response.errors === 'object'&eol;                && typeof response.errors[0] === 'string') {&eol;            throw response.errors[0];&eol;        }&eol;        else {&eol;            throw 'Unknown error. Check debug log for more information.';&eol;        }&eol;    }&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.Log(4, '[ Pushover Webhook ] Pushover notification failed: ' + error);&eol;    throw 'Pushover notification failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                          |Please refer to setup guide here: https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/pushover&eol;&eol;Set token parameter with to your Pushover application key.&eol;When assigning Pushover media to the Zabbix user - add user key into send to field|
ROW   |7          |4   |PagerDuty |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |try {&eol;&eol;    var params = JSON.parse(value),&eol;        req = new CurlHttpRequest(),&eol;        fields = {},&eol;        resp = '';&eol;&eol;    if (isNaN(parseInt(params.eventid)) &pipe;&pipe; params.eventid < 1) {&eol;        throw 'incorrect value for variable "eventid". The value must be a positive number.';&eol;    }&eol;    if (params.eventname.length < 1) {&eol;        throw 'incorrect value for variable "eventname". The value must be a non-empty string.';&eol;    }&eol;    if (params.hostname.length < 1) {&eol;        throw 'incorrect value for variable "eventname". The value must be a non-empty string.';&eol;    }&eol;    if (isNaN(parseInt(params.severity)) &pipe;&pipe; (params.severity < 0 && params.severity > 5)) {&eol;        throw 'incorrect value for variable "severity". The value must be a number 0..5.';&eol;    }&eol;    if (isNaN(parseInt(params.triggerid)) &pipe;&pipe; params.triggerid < 1) {&eol;        throw 'incorrect value for variable "triggerid". The value must be a positive number.';&eol;    }&eol;    if (params.eventack != 'Yes' && params.eventack != 'No') {&eol;        throw 'incorrect value for variable "eventack". The value must be Yes or No.';&eol;    }&eol;    if (isNaN(parseInt(params.eventupdate)) &pipe;&pipe; (params.eventupdate < 0 &pipe;&pipe; params.eventupdate > 1)) {&eol;        throw 'incorrect value for variable "eventupdate". The value must be 0 or 1.';&eol;    }&eol;    if (isNaN(parseInt(params.eventvalue)) &pipe;&pipe; (params.eventvalue < 0 &pipe;&pipe; params.eventvalue > 1)) {&eol;        throw 'incorrect value for variable "eventvalue". The value must be 0 or 1.';&eol;    }&eol;&eol;    // Correspondence between the PagerDuty and Zabbix severity level&eol;    var severityMapping = [&eol;        'info',    // Not classified&eol;        'info',    // Information&eol;        'warning', // Warning&eol;        'warning', // Average&eol;        'error',   // High&eol;        'critical' // Disaster&eol;    ];&eol;&eol;    req.AddHeader('Content-Type: application/json');&eol;&eol;    fields.routing_key = params.token;&eol;    fields.dedup_key = params.eventid;&eol;&eol;    if ((params.eventvalue == 1) && (params.eventupdate == 0)) {&eol;        fields.event_action = 'trigger';&eol;        fields.payload = {&eol;            summary: params.eventname,&eol;            source: params.hostname + ' : ' + params.hostip,&eol;            severity: severityMapping[params.severity],&eol;            custom_details: {&eol;                'Event date': params.eventdate,&eol;                'Event time': params.eventtime,&eol;                'Trigger description': params.triggerdesc,&eol;                'Trigger opdata': params.triggeropdata,&eol;                'Event tags': params.eventtags,&eol;                'Event host': params.hostname,&eol;                'Event host ip': params.hostip&eol;            }&eol;        };&eol;        fields.links = [{&eol;            href: params.url + '/tr_events.php?triggerid=' + params.triggerid + '&eventid=' + params.eventid,&eol;            text: 'Event link'&eol;        }];&eol;        fields.client = 'Zabbix';&eol;        fields.client_url = params.url;&eol;    }&eol;    else if ((params.eventvalue == 1) && (params.eventupdate == 1) && (params.eventack == 'Yes'))&eol;        fields.event_action = 'acknowledge';&eol;    else if (params.eventvalue == 0)&eol;        fields.event_action = 'resolve';&eol;    else&eol;        throw 'incorrect values. Update message without ack will not be sent.';&eol;&eol;    Zabbix.Log(4, '[PagerDuty Webhook] Sending request:' + JSON.stringify(fields));&eol;    resp = req.Post('https://events.pagerduty.com/v2/enqueue',&eol;        JSON.stringify(fields)&eol;    );&eol;    Zabbix.Log(4, '[PagerDuty Webhook] Receiving response:' + resp);&eol;&eol;    try {&eol;        resp = JSON.parse(resp);&eol;    }&eol;    catch (error) {&eol;        throw 'incorrect response. PagerDuty returned a non-JSON object.';&eol;    }&eol;&eol;    if (req.Status() != 202) {&eol;        if (typeof resp === 'object' && typeof resp.errors === 'object' && typeof resp.errors[0] === 'string') {&eol;            throw resp.errors[0];&eol;        }&eol;        else {&eol;            throw 'Unknown error.';&eol;        }&eol;    }&eol;&eol;    if (resp.status != 'success') {&eol;        throw 'Unknown error.';&eol;    }&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[PagerDuty Webhook] Notification failed : ' + error);&eol;    throw 'PagerDuty notification failed : ' + error;&eol;}|30s    |0           |0              |                                      |                                                          |Please refer to https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2 and https://www.zabbix.com/documentation/current/manual/config/notifications/media/webhook#example_scripts.&eol;  &eol;Set global macro {$ZABBIX.URL} with your Zabbix server URL.&eol;Add a dedicated user with the media type "PagerDuty" and place the integration key in the "token" parameter to integrate into the service|
ROW   |8          |4   |Slack     |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var SEVERITY_COLORS = [&eol;	'#97AAB3', '#7499FF', '#FFC859',&eol;	'#FFA059', '#E97659', '#E45959'&eol;	];&eol;&eol;var RESOLVE_COLOR = '#009900';&eol;&eol;var SLACK_MODE_HANDLERS = {&eol;	alarm: handlerAlarm,&eol;	event: handlerEvent&eol;};&eol;&eol;var EVENT_STATUS = {&eol;	PROBLEM: 'PROBLEM',&eol;	UPDATE: 'UPDATE',&eol;	RESOLVE: 'OK'&eol;}&eol;&eol;if (!String.prototype.format) {&eol; 	String.prototype.format = function() {&eol;   		var args = arguments;&eol;   		return this.replace(/{(\d+)}/g, function(match, number) { &eol;			return number in args&eol;				? args[number]&eol;				: match&eol;			;&eol;		});&eol;	};&eol;}&eol;&eol;function isEventProblem(params) {&eol;	return params.event_value == 1&eol;		&& params.event_update_status == 0&eol;		;&eol;}&eol;&eol;function isEventUpdate(params) {&eol;	return params.event_value == 1&eol;		&& params.event_update_status == 1&eol;		// && params.event_ack_status == 'Yes'&eol;		;&eol;}&eol;&eol;function isEventResolve(params) {&eol;	return params.event_value == 0;&eol;}&eol;&eol;function getPermalink(channelId, messageTimestamp) {&eol;	var req = new CurlHttpRequest();&eol;	req.AddHeader('Content-Type: application/x-www-form-urlencoded; charset=utf-8');&eol;&eol;	var resp = JSON.parse(req.Get(&eol;		'{0}?token={1}&channel={2}&message_ts={3}'.format(&eol;			Slack.getPermalink,&eol;			params.bot_token,&eol;			channelId,&eol;			messageTimestamp&eol;			)&eol;		));&eol;	&eol;	if (req.Status != 200 && !resp.ok) {&eol;		throw resp.error;&eol;	}&eol;&eol;	return resp.permalink;&eol;}&eol;&eol;function createProblemURL(zabbixURL, triggerId, eventId) {&eol;	var problemURL = '{0}/tr_events.php?triggerid={1}&eventid={2}'&eol;		.format(&eol;			zabbixURL.replace(/\/+$/, ''),&eol;			triggerId,&eol;			eventId&eol;		);&eol;&eol;	return problemURL&eol;}&eol;&eol;function getTagValue(eventTags, key) {&eol;	var pattern = new RegExp('(' + key + ':.+)');&eol;	var tagValue = eventTags&eol;		.split(',')&eol;		.filter(function (v) {return v.match(pattern)})&eol;		.map(function (v) {return v.split(':')[1]})[0]&eol;		&pipe;&pipe; 0;&eol;&eol;	return tagValue;&eol;}&eol;&eol;function handlerAlarm(params) {&eol;	var fields = {&eol;		channel: params.channel,&eol;		as_user: params.slack_as_user,&eol;	}&eol;&eol;	if (isEventProblem(params)) {&eol;		fields.attachments = [&eol;			createMessage(&eol;				EVENT_STATUS.PROBLEM,&eol;				SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;				params.event_date,&eol;				params.event_time,&eol;				createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;				)&eol;			];&eol;&eol;		var resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;		if (req.Status != 200 && !resp.ok) {&eol;			throw resp.error;&eol;		}&eol;&eol;		result.tags.__message_ts = resp.ts;&eol;		result.tags.__channel_id = resp.channel;&eol;		result.tags.__channel_name = params.channel;&eol;		result.tags.__message_link = getPermalink(resp.channel, resp.ts);&eol;	&eol;	} else if (isEventUpdate(params)) {&eol;		fields.thread_ts = getTagValue(params.event_tags, 'message_ts');&eol;		fields.attachments = [&eol;			createMessage(&eol;				EVENT_STATUS.UPDATE,&eol;				SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;				params.event_update_date,&eol;				params.event_update_time,&eol;				createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&eol;				true,&eol;				params.event_update_message&eol;				)&eol;			];&eol;&eol;		var resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;		if (req.Status != 200 && !resp.ok) {&eol;			throw resp.error;&eol;		}&eol;&eol;	} else if (isEventResolve(params)) {&eol;		fields.channel = getTagValue(params.event_tags, 'channel_id');&eol;		fields.text = '';&eol;		fields.ts = getTagValue(params.event_tags, 'message_ts');&eol;		fields.attachments = [&eol;			createMessage(&eol;				EVENT_STATUS.RESOLVE,&eol;				RESOLVE_COLOR,&eol;				params.event_date,&eol;				params.event_time,&eol;				createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;				)&eol;			];&eol;&eol;		var resp = JSON.parse(req.Post(Slack.chatUpdate, JSON.stringify(fields)));&eol;		if (req.Status != 200 && !resp.ok) {&eol;			throw resp.error;&eol;		}&eol;	}&eol;}&eol;&eol;function handlerEvent(params) {&eol;	var fields = {&eol;		channel: params.channel,&eol;		as_user: params.slack_as_user&eol;	}&eol;&eol;	if (isEventProblem(params)) {&eol;		fields.attachments = [&eol;			createMessage(&eol;				EVENT_STATUS.PROBLEM,&eol;				SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;				params.event_date,&eol;				params.event_time,&eol;				createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;				)&eol;			];&eol;&eol;		var resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;		if (req.Status != 200 && !resp.ok) {&eol;			throw resp.error;&eol;		}&eol;&eol;		result.tags.__channel_name = params.channel;&eol;		result.tags.__message_link = getPermalink(resp.channel, resp.ts);&eol;	&eol;	} else if (isEventUpdate(params)) {&eol;		fields.attachments = [&eol;			createMessage(&eol;				EVENT_STATUS.UPDATE,&eol;				SEVERITY_COLORS[params.event_nseverity] &pipe;&pipe; 0,&eol;				params.event_update_date,&eol;				params.event_update_time,&eol;				createProblemURL(params.zabbix_url, params.trigger_id, params.event_id),&eol;				false,&eol;				params.event_update_message&eol;				)&eol;			];&eol;		&eol;		var resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;		if (req.Status != 200 && !resp.ok) {&eol;			throw resp.error;&eol;		}&eol;&eol;	} else if (isEventResolve(params)) {&eol;		fields.attachments = [&eol;			createMessage(&eol;				EVENT_STATUS.RESOLVE,&eol;				RESOLVE_COLOR,&eol;				params.event_recovery_date,&eol;				params.event_recovery_time,&eol;				createProblemURL(params.zabbix_url, params.trigger_id, params.event_id)&eol;				)&eol;			];&eol;&eol;		var resp = JSON.parse(req.Post(Slack.postMessage, JSON.stringify(fields)));&eol;		if (req.Status != 200 && !resp.ok) {&eol;			throw resp.error;&eol;		}&eol;	}&eol;}	&eol;&eol;function createMessage(&eol;	status,&eol;	eventSeverityColor,&eol;	eventDate,&eol;	eventTime,&eol;	problemURL,&eol;	isShort,&eol;	messageText&eol;	) {&eol;	var message = {&eol;		'fallback': '{0}: {1}'.format(status, params.event_name),&eol;		'title': '{0}: {1}'.format(status, params.event_name),&eol;		'color': eventSeverityColor,&eol;		'title_link': problemURL,&eol;		'pretext': messageText &pipe;&pipe; '',&eol;		&eol;		'fields': [&eol;			{&eol;				'title': 'Host',&eol;				'value': '{0} [{1}]'.format(params.host_name, params.host_ip),&eol;				'short': true&eol;			},&eol;			{&eol;				'title': 'Event time',&eol;				'value': '{0} {1}'.format(eventDate, eventTime),&eol;				'short': true&eol;			},&eol;			{&eol;				'title': 'Severity',&eol;				'value': params.event_severity,&eol;				'short': true&eol;			},&eol;			{&eol;				'title': 'Opdata',&eol;				'value': params.event_opdata,&eol;				'short': true&eol;			}&eol;		],&eol;	};&eol;&eol;	if (!isShort) {&eol;		message['actions'] = [&eol;			{&eol;                "type": "button",&eol;                "text": "Open in Zabbix",&eol;                "url": problemURL&eol;            }&eol;		];&eol;&eol;		message.fields.push(&eol;			{&eol;				'title': 'Event tags',&eol;				'value': params.event_tags.replace(/__.+?:(.+?,&pipe;.+)/g, '') &pipe;&pipe; 'None',&eol;				'short': true&eol;			},&eol;			{&eol;				'title': 'Trigger description',&eol;				'value': params.trigger_description,&eol;				'short': true&eol;			}&eol;			)&eol;	}&eol;&eol;	return message;&eol;}&eol;&eol;try {&eol;	var params = JSON.parse(value),&eol;		req = new CurlHttpRequest(),&eol;		fields = {},&eol;		result = {tags: {}};&eol;&eol;&eol;	req.AddHeader('Content-Type: application/json; charset=utf-8');&eol;	req.AddHeader('Authorization: Bearer ' + params.bot_token)&eol;&eol;	var Slack = {&eol;		postMessage: params.slack_endpoint + 'chat.postMessage',&eol;		getPermalink: params.slack_endpoint + 'chat.getPermalink',&eol;		chatUpdate: params.slack_endpoint + 'chat.update'&eol;	}&eol;&eol;	params.slack_mode = params.slack_mode.toLowerCase();&eol;	params.slack_mode = params.slack_mode in SLACK_MODE_HANDLERS&eol;		? params.slack_mode&eol;		: 'alarm';&eol;&eol;	SLACK_MODE_HANDLERS[params.slack_mode](params);&eol;	return JSON.stringify(result);&eol;&eol;} catch (error) {&eol;	Zabbix.Log(3, 'Slack notification failed : ' + error);&eol;	throw 'Slack notification failed : ' + error;&eol;}|30s    |1           |1              |{EVENT.TAGS.__message_link}           |Open in Slack: {EVENT.TAGS.__channel_name}                ||
ROW   |9          |4   |Discord   |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var SEVERITY_COLORS = [&eol;    '#97AAB3', // Not classified.&eol;    '#7499FF', // Information.&eol;    '#FFC859', // Warning.&eol;    '#FFA059', // Average.&eol;    '#E97659', // High.&eol;    '#E45959', // Disaster.&eol;    '#009900'  // Resolved.&eol;];&eol;&eol;function stringTruncate(str, len) {&eol;    return str.length > len ? str.substring(0, len - 3) + '...' : str;&eol;}&eol;&eol;try {&eol;    Zabbix.Log(4, '[ Discord Webhook ] Executed with params: ' + value);&eol;&eol;    var params = JSON.parse(value);&eol;&eol;    if (!params.discord_endpoint) {&eol;        throw 'Cannot get discord_endpoint';&eol;    }&eol;    else if (!params.discord_endpoint.startsWith('https://discordapp.com/api/webhooks')) {&eol;        throw 'Invalid Discord webhook URL: ' + params.discord_endpoint;&eol;    }&eol;    else {&eol;        params.discord_endpoint = params.discord_endpoint.replace('/api/', '/api/v1000/') + '?wait=True';&eol;    }&eol;&eol;    params.zabbix_url = (params.zabbix_url.endsWith('/'))&eol;        ? params.zabbix_url.slice(0, -1) : params.zabbix_url;&eol;&eol;    if (!(params.event_value == 0 &pipe;&pipe; params.event_value == 1)) {&eol;        throw 'Incorrect "event_value" parameter given: ' + params.event_value + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (!(params.event_update_status == 0 &pipe;&pipe; params.event_update_status == 1)) {&eol;        throw 'Incorrect "event_update_status" parameter given: ' + params.event_update_status + '\nMust be 0 or 1.';&eol;    }&eol;&eol;    if (params.event_value == 0) {&eol;        params.event_nseverity = '6';&eol;    }&eol;&eol;    if (!SEVERITY_COLORS[params.event_nseverity]) {&eol;        throw 'Incorrect "event_nseverity" parameter given: ' + params.event_nseverity + '\nMust be 0-5.';&eol;    }&eol;&eol;    var color = parseInt(SEVERITY_COLORS[params.event_nseverity].replace('#', ''), 16),&eol;        fields = [],&eol;        body = {&eol;            embeds: [&eol;                {&eol;                    color: color &pipe;&pipe; 0,&eol;                    url: params.zabbix_url + '/tr_events.php?triggerid=' +&eol;                        params.trigger_id + '&eventid=' + params.event_id&eol;                }&eol;            ]&eol;        };&eol;&eol;    // Default message from {ALERT.MESSAGE}.&eol;    if (params.use_default_message.toLowerCase() == 'true') {&eol;        body.embeds[0].title = stringTruncate(params.alert_subject, 256);&eol;        body.embeds[0].description = stringTruncate(params.alert_message, 2048);&eol;    }&eol;    else {&eol;        fields.push(&eol;            {&eol;                name: 'Host',&eol;                value: params.host_name + ' [' + params.host_ip + ']'&eol;            }&eol;        );&eol;&eol;        // Resolved message.&eol;        if (params.event_value == 0) {&eol;            body.embeds[0].title = stringTruncate('OK: ' + params.event_name, 256);&eol;            fields.push(&eol;                {&eol;                    name: 'Revovery time',&eol;                    value: params.event_recovery_time + ' ' + params.event_recovery_date,&eol;                    inline: 'True'&eol;                }&eol;            );&eol;        }&eol;&eol;        // Problem message.&eol;        else if (params.event_update_status == 0) {&eol;            body.embeds[0].title = stringTruncate('PROBLEM: ' + params.event_name, 256);&eol;            fields.push(&eol;                {&eol;                    name: 'Event time',&eol;                    value: params.event_time + ' ' + params.event_date,&eol;                    inline: 'True'&eol;                }&eol;            );&eol;        }&eol;&eol;        // Update message.&eol;        else if (params.event_update_status == 1) {&eol;            body.embeds[0].title = stringTruncate('UPDATE: ' + params.event_name, 256);&eol;            body.embeds[0].description = params.event_update_user + ' ' + params.event_update_action + '.';&eol;&eol;            if (params.event_update_message) {&eol;                body.embeds[0].description += ' Comment:\n>>> ' + params.event_update_message;&eol;            }&eol;&eol;            body.embeds[0].description = stringTruncate(body.embeds[0].description, 2048);&eol;&eol;            fields.push(&eol;                {&eol;                    name: 'Event update time',&eol;                    value: params.event_update_time + ' ' + params.event_update_date,&eol;                    inline: 'True'&eol;                }&eol;            );&eol;        }&eol;&eol;        fields.push(&eol;            {&eol;                name: 'Severity',&eol;                value: params.event_severity,&eol;                inline: 'True'&eol;            }&eol;        );&eol;&eol;        if (params.event_opdata) {&eol;            fields.push(&eol;                {&eol;                    name: 'Operational data',&eol;                    value: stringTruncate(params.event_opdata, 1024),&eol;                    inline: 'True'&eol;                }&eol;            );&eol;        }&eol;&eol;        if (params.event_value == 1 && params.event_update_status == 0 && params.trigger_description) {&eol;            fields.push(&eol;                {&eol;                    name: 'Trigger description',&eol;                    value: stringTruncate(params.trigger_description, 1024)&eol;                }&eol;            );&eol;        }&eol;&eol;        body.embeds[0].footer = {&eol;            text: 'Event ID: ' + params.event_id&eol;        };&eol;&eol;        if (params.event_tags) {&eol;            body.embeds[0].footer.text += '\nEvent tags: ' + params.event_tags;&eol;        }&eol;        body.embeds[0].footer.text = stringTruncate(body.embeds[0].footer.text, 2048);&eol;    }&eol;&eol;    if (fields.length > 0) {&eol;        body.embeds[0].fields = fields;&eol;    }&eol;&eol;    var req = new CurlHttpRequest();&eol;&eol;    req.AddHeader('Content-Type: application/json');&eol;&eol;    var resp = req.Post(params.discord_endpoint, JSON.stringify(body)),&eol;        data = JSON.parse(resp);&eol;&eol;    Zabbix.Log(4, '[ Discord Webhook ] JSON: ' + JSON.stringify(body));&eol;    Zabbix.Log(4, '[ Discord Webhook ] Response: ' + resp);&eol;&eol;    if (data.id) {&eol;        return resp;&eol;    }&eol;    else {&eol;        var message = ((typeof data.message === 'string') ? data.message : 'Unknown error');&eol;&eol;        Zabbix.Log(3, '[ Discord Webhook ] FAILED with response: ' + resp);&eol;        throw message + '. For more details check zabbix server log.';&eol;    }&eol;}&eol;catch (error) {&eol;    Zabbix.Log(3, '[ Discord Webhook ] ERROR: ' + error);&eol;    throw 'Sending failed: ' + error;&eol;}|30s    |0           |0              |                                      |                                                          ||
ROW   |10         |4   |Telegram  |                |           |                  |         |          |        |      |0     |25       |0            |0               |0               |0                  |           |1          |3          |10s             |1           |var Telegram = {&eol;    token: null,&eol;    to: null,&eol;    message: null,&eol;    proxy: null,&eol;    parse_mode: null,&eol;&eol;    sendMessage: function() {&eol;        var params = {&eol;            chat_id: Telegram.to,&eol;            text: Telegram.message,&eol;            disable_web_page_preview: true,&eol;            disable_notification: false&eol;        },&eol;        data,&eol;        response,&eol;        request = new CurlHttpRequest(),&eol;        url = 'https://api.telegram.org/bot' + Telegram.token + '/sendMessage';&eol;&eol;        if (Telegram.parse_mode !== null) {&eol;            params['parse_mode'] = Telegram.parse_mode;&eol;        }&eol;&eol;        if (Telegram.proxy) {&eol;            request.setProxy(Telegram.proxy);&eol;        }&eol;&eol;        request.AddHeader('Content-Type: application/json');&eol;        data = JSON.stringify(params);&eol;&eol;        // Remove replace() function if you want to see the exposed token in the log file.&eol;        Zabbix.Log(4, '[Telegram Webhook] URL: ' + url.replace(Telegram.token, '<TOKEN>'));&eol;        Zabbix.Log(4, '[Telegram Webhook] params: ' + data);&eol;        response = request.Post(url, data);&eol;        Zabbix.Log(4, '[Telegram Webhook] HTTP code: ' + request.Status());&eol;&eol;        try {&eol;            response = JSON.parse(response);&eol;        }&eol;        catch (error) {&eol;            response = null;&eol;        }&eol;&eol;        if (request.Status() !== 200 &pipe;&pipe; typeof response.ok !== 'boolean' &pipe;&pipe; response.ok !== true) {&eol;            if (typeof response.description === 'string') {&eol;                throw response.description;&eol;            }&eol;            else {&eol;                throw 'Unknown error. Check debug log for more information.'&eol;            }&eol;        }&eol;    }&eol;}&eol;&eol;try {&eol;    var params = JSON.parse(value);&eol;&eol;    if (typeof params.Token === 'undefined') {&eol;        throw 'Incorrect value is given for parameter "Token": parameter is missing';&eol;    }&eol;&eol;    Telegram.token = params.Token;&eol;&eol;    if (params.HTTPProxy) {&eol;        Telegram.proxy = params.HTTPProxy;&eol;    } &eol;&eol;    if (['Markdown', 'HTML', 'MarkdownV2'].indexOf(params.ParseMode) !== -1) {&eol;        Telegram.parse_mode = params.ParseMode;&eol;    }&eol;&eol;    Telegram.to = params.To;&eol;    Telegram.message = params.Subject + '\n' + params.Message;&eol;    Telegram.sendMessage();&eol;&eol;    return 'OK';&eol;}&eol;catch (error) {&eol;    Zabbix.Log(4, '[Telegram Webhook] notification failed: ' + error);&eol;    throw 'Sending failed: ' + error + '.';&eol;}|10s    |0           |0              |                                      |                                                          |https://git.zabbix.com/projects/ZBX/repos/zabbix/browse/templates/media/telegram&eol;&eol;1. Register bot: send "/newbot" to @BotFather and follow instructions&eol;2. Copy and paste the obtained token into the "Token" field above&eol;3. If you want to send personal notifications, you need to get chat id of the user you want to send messages to:&eol;    3.1. Send "/getid" to "@myidbot" in Telegram messenger&eol;    3.2. Copy returned chat id and save it in the "Telegram Webhook" media for the user&eol;    3.3. Ask the user to send "/start" to your bot (Telegram bot won't send anything to the user without it)&eol;4. If you want to send group notifications, you need to get group id of the group you want to send messages to:&eol;    4.1. Add "@myidbot" to your group&eol;    4.2. Send "/getgroupid@myidbot" in your group&eol;    4.3. Copy returned group id save it in the "Telegram Webhook" media for the user you created for  group notifications&eol;    4.4. Send "/start@your_bot_name_here" in your group (Telegram bot won't send anything to the group without it)|

TABLE |media_type_param
FIELDS|mediatype_paramid|mediatypeid|name                |value                                   |
ROW   |1                |4          |zabbix_url          |{$ZABBIX.URL}                           |
ROW   |2                |4          |bot_token           |<YOUR BOT TOKEN>                        |
ROW   |3                |4          |mattermost_url      |<YOUR MATTERMOST URL>                   |
ROW   |4                |4          |send_mode           |alarm                                   |
ROW   |5                |4          |send_to             |{ALERT.SENDTO}                          |
ROW   |6                |4          |event_tags          |{EVENT.TAGS}                            |
ROW   |7                |4          |event_name          |{EVENT.NAME}                            |
ROW   |8                |4          |event_nseverity     |{EVENT.NSEVERITY}                       |
ROW   |9                |4          |event_ack_status    |{EVENT.ACK.STATUS}                      |
ROW   |10               |4          |event_value         |{EVENT.VALUE}                           |
ROW   |11               |4          |event_update_status |{EVENT.UPDATE.STATUS}                   |
ROW   |12               |4          |event_date          |{EVENT.DATE}                            |
ROW   |13               |4          |event_time          |{EVENT.TIME}                            |
ROW   |14               |4          |event_severity      |{EVENT.SEVERITY}                        |
ROW   |15               |4          |event_opdata        |{EVENT.OPDATA}                          |
ROW   |16               |4          |event_id            |{EVENT.ID}                              |
ROW   |17               |4          |event_update_message|{EVENT.UPDATE.MESSAGE}                  |
ROW   |18               |4          |trigger_id          |{TRIGGER.ID}                            |
ROW   |19               |4          |trigger_description |{TRIGGER.DESCRIPTION}                   |
ROW   |20               |4          |host_name           |{HOST.NAME}                             |
ROW   |21               |4          |host_ip             |{HOST.IP}                               |
ROW   |22               |4          |event_update_date   |{EVENT.UPDATE.DATE}                     |
ROW   |23               |4          |event_update_time   |{EVENT.UPDATE.TIME}                     |
ROW   |24               |4          |event_recovery_date |{EVENT.RECOVERY.DATE}                   |
ROW   |25               |4          |event_recovery_time |{EVENT.RECOVERY.TIME}                   |
ROW   |26               |5          |url                 |<put your opsgenie api url>             |
ROW   |27               |5          |web                 |<put your opsgenie web url>             |
ROW   |28               |5          |token               |<put your key>                          |
ROW   |29               |5          |subject             |{ALERT.SUBJECT}                         |
ROW   |30               |5          |message             |{ALERT.MESSAGE}                         |
ROW   |31               |5          |eventid             |{EVENT.ID}                              |
ROW   |32               |5          |severity            |{EVENT.NSEVERITY}                       |
ROW   |33               |5          |user                |{USER.FULLNAME}                         |
ROW   |34               |5          |eventvalue          |{EVENT.VALUE}                           |
ROW   |35               |5          |eventupdate         |{EVENT.UPDATE.STATUS}                   |
ROW   |36               |5          |eventaction         |{EVENT.UPDATE.ACTION}                   |
ROW   |37               |5          |zbxurl              |{$ZABBIX.URL}                           |
ROW   |38               |5          |triggerid           |{TRIGGER.ID}                            |
ROW   |39               |6          |token               |<PUSHOVER TOKEN HERE>                   |
ROW   |40               |6          |user                |{ALERT.SENDTO}                          |
ROW   |41               |6          |message             |{ALERT.MESSAGE}                         |
ROW   |42               |6          |title               |{ALERT.SUBJECT}                         |
ROW   |43               |6          |url                 |{$ZABBIX.URL}                           |
ROW   |44               |6          |url_title           |Zabbix                                  |
ROW   |45               |6          |priority            |0                                       |
ROW   |46               |6          |eventid             |{EVENT.ID}                              |
ROW   |47               |6          |triggerid           |{TRIGGER.ID}                            |
ROW   |48               |7          |token               |<put your key>                          |
ROW   |49               |7          |eventid             |{EVENT.ID}                              |
ROW   |50               |7          |eventname           |{EVENT.NAME}                            |
ROW   |51               |7          |hostname            |{HOST.NAME}                             |
ROW   |52               |7          |hostip              |{HOST.IP}                               |
ROW   |53               |7          |severity            |{EVENT.NSEVERITY}                       |
ROW   |54               |7          |triggerdesc         |{TRIGGER.DESCRIPTION}                   |
ROW   |55               |7          |triggeropdata       |{EVENT.OPDATA}                          |
ROW   |56               |7          |eventtags           |{EVENT.TAGS}                            |
ROW   |57               |7          |triggerid           |{TRIGGER.ID}                            |
ROW   |58               |7          |eventdate           |{EVENT.DATE}                            |
ROW   |59               |7          |eventtime           |{EVENT.TIME}                            |
ROW   |61               |7          |eventack            |{EVENT.ACK.STATUS}                      |
ROW   |62               |7          |eventupdate         |{EVENT.UPDATE.STATUS}                   |
ROW   |63               |7          |eventvalue          |{EVENT.VALUE}                           |
ROW   |64               |7          |url                 |{$ZABBIX.URL}                           |
ROW   |65               |8          |zabbix_url          |{$ZABBIX.URL}                           |
ROW   |66               |8          |bot_token           |<PLACE YOUR KEY HERE>                   |
ROW   |67               |8          |channel             |{ALERT.SENDTO}                          |
ROW   |68               |8          |slack_mode          |alarm                                   |
ROW   |69               |8          |slack_as_user       |true                                    |
ROW   |70               |8          |slack_endpoint      |https://slack.com/api/                  |
ROW   |71               |8          |event_tags          |{EVENT.TAGS}                            |
ROW   |72               |8          |event_name          |{EVENT.NAME}                            |
ROW   |73               |8          |event_nseverity     |{EVENT.NSEVERITY}                       |
ROW   |74               |8          |event_ack_status    |{EVENT.ACK.STATUS}                      |
ROW   |75               |8          |event_value         |{EVENT.VALUE}                           |
ROW   |76               |8          |event_update_status |{EVENT.UPDATE.STATUS}                   |
ROW   |77               |8          |event_date          |{EVENT.DATE}                            |
ROW   |78               |8          |event_time          |{EVENT.TIME}                            |
ROW   |79               |8          |event_severity      |{EVENT.SEVERITY}                        |
ROW   |80               |8          |event_opdata        |{EVENT.OPDATA}                          |
ROW   |81               |8          |event_id            |{EVENT.ID}                              |
ROW   |82               |8          |event_update_message|{EVENT.UPDATE.MESSAGE}                  |
ROW   |83               |8          |trigger_id          |{TRIGGER.ID}                            |
ROW   |84               |8          |trigger_description |{TRIGGER.DESCRIPTION}                   |
ROW   |85               |8          |host_name           |{HOST.NAME}                             |
ROW   |86               |8          |host_ip             |{HOST.IP}                               |
ROW   |87               |8          |event_update_date   |{EVENT.UPDATE.DATE}                     |
ROW   |88               |8          |event_update_time   |{EVENT.UPDATE.TIME}                     |
ROW   |89               |8          |event_recovery_date |{EVENT.RECOVERY.DATE}                   |
ROW   |90               |8          |event_recovery_time |{EVENT.RECOVERY.TIME}                   |
ROW   |91               |9          |zabbix_url          |{$ZABBIX.URL}                           |
ROW   |92               |9          |discord_endpoint    |{ALERT.SENDTO}                          |
ROW   |93               |9          |use_default_message |false                                   |
ROW   |94               |9          |alert_message       |{ALERT.MESSAGE}                         |
ROW   |95               |9          |alert_subject       |{ALERT.SUBJECT}                         |
ROW   |96               |9          |event_name          |{EVENT.NAME}                            |
ROW   |97               |9          |event_id            |{EVENT.ID}                              |
ROW   |98               |9          |event_severity      |{EVENT.SEVERITY}                        |
ROW   |99               |9          |event_nseverity     |{EVENT.NSEVERITY}                       |
ROW   |100              |9          |event_opdata        |{EVENT.OPDATA}                          |
ROW   |101              |9          |event_tags          |{EVENT.TAGS}                            |
ROW   |102              |9          |event_time          |{EVENT.TIME}                            |
ROW   |103              |9          |event_date          |{EVENT.DATE}                            |
ROW   |104              |9          |event_recovery_date |{EVENT.RECOVERY.DATE}                   |
ROW   |105              |9          |event_recovery_time |{EVENT.RECOVERY.TIME}                   |
ROW   |106              |9          |event_update_date   |{EVENT.UPDATE.DATE}                     |
ROW   |107              |9          |event_update_time   |{EVENT.UPDATE.TIME}                     |
ROW   |108              |9          |event_update_action |{EVENT.UPDATE.ACTION}                   |
ROW   |109              |9          |event_update_message|{EVENT.UPDATE.MESSAGE}                  |
ROW   |110              |9          |event_update_status |{EVENT.UPDATE.STATUS}                   |
ROW   |111              |9          |event_update_user   |{USER.FULLNAME}                         |
ROW   |112              |9          |event_value         |{EVENT.VALUE}                           |
ROW   |113              |9          |host_ip             |{HOST.IP}                               |
ROW   |114              |9          |host_name           |{HOST.NAME}                             |
ROW   |115              |9          |trigger_description |{TRIGGER.DESCRIPTION}                   |
ROW   |116              |9          |trigger_id          |{TRIGGER.ID}                            |
ROW   |117              |6          |endpoint            |https://api.pushover.net/1/messages.json|
ROW   |118              |6          |retry               |60                                      |
ROW   |119              |6          |expire              |1200                                    |
ROW   |120              |10         |Message             |{ALERT.MESSAGE}                         |
ROW   |121              |10         |ParseMode           |                                        |
ROW   |122              |10         |Subject             |{ALERT.SUBJECT}                         |
ROW   |123              |10         |To                  |{ALERT.SENDTO}                          |
ROW   |124              |10         |Token               |<PLACE YOUR TOKEN>                      |

TABLE |usrgrp
FIELDS|usrgrpid|name                     |gui_access|users_status|debug_mode|
ROW   |7       |Zabbix administrators    |0         |0           |0         |
ROW   |8       |Guests                   |1         |0           |0         |
ROW   |9       |Disabled                 |0         |1           |0         |
ROW   |11      |Enabled debug mode       |0         |0           |1         |
ROW   |12      |No access to the frontend|3         |0           |0         |

TABLE |users_groups
FIELDS|id  |usrgrpid|userid|
ROW   |2   |8       |2     |
ROW   |3   |9       |2     |
ROW   |4   |7       |1     |

TABLE |scripts
FIELDS|scriptid|name                   |command                                                       |host_access|usrgrpid|groupid|description|confirmation|type|execute_on|
ROW   |1       |Ping                   |ping -c 3 {HOST.CONN}; case $? in [01]) true;; *) false;; esac|2          |NULL    |NULL   |           |            |0   |2         |
ROW   |2       |Traceroute             |/usr/bin/traceroute {HOST.CONN}                               |2          |NULL    |NULL   |           |            |0   |2         |
ROW   |3       |Detect operating system|sudo /usr/bin/nmap -O {HOST.CONN}                             |2          |7       |NULL   |           |            |0   |2         |

TABLE |actions
FIELDS|actionid|name                                          |eventsource|evaltype|status|esc_period|def_shortdata                              |def_longdata                                                                                                                                                                                  |r_shortdata                                |r_longdata                                                                                                                                                                                                                |formula|pause_suppressed|ack_shortdata                |ack_longdata                                                                                                                                                                                             |
ROW   |2       |Auto discovery. Linux servers.                |1          |0       |1     |0         |                                           |                                                                                                                                                                                              |                                           |                                                                                                                                                                                                                          |       |1               |                             |                                                                                                                                                                                                         |
ROW   |3       |Report problems to Zabbix administrators      |0          |0       |1     |1h        |Problem: {EVENT.NAME}                      |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}|Resolved: {EVENT.NAME}                     |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}|       |1               |Updated problem: {EVENT.NAME}|{USER.FULLNAME} {EVENT.UPDATE.ACTION} problem at {EVENT.UPDATE.DATE} {EVENT.UPDATE.TIME}.&eol;{EVENT.UPDATE.MESSAGE}&eol;&eol;Current problem status is {EVENT.STATUS}, acknowledged: {EVENT.ACK.STATUS}.|
ROW   |4       |Report not supported items                    |3          |0       |1     |1h        |{ITEM.STATE}: {HOST.NAME}:{ITEM.NAME}      |Host: {HOST.NAME}&eol;Item: {ITEM.NAME}&eol;Key: {ITEM.KEY}&eol;State: {ITEM.STATE}                                                                                                           |{ITEM.STATE}: {HOST.NAME}:{ITEM.NAME}      |Host: {HOST.NAME}&eol;Item: {ITEM.NAME}&eol;Key: {ITEM.KEY}&eol;State: {ITEM.STATE}                                                                                                                                       |       |1               |                             |                                                                                                                                                                                                         |
ROW   |5       |Report not supported low level discovery rules|3          |0       |1     |1h        |{LLDRULE.STATE}: {HOST.NAME}:{LLDRULE.NAME}|Host: {HOST.NAME}&eol;Low level discovery rule: {LLDRULE.NAME}&eol;Key: {LLDRULE.KEY}&eol;State: {LLDRULE.STATE}                                                                              |{LLDRULE.STATE}: {HOST.NAME}:{LLDRULE.NAME}|Host: {HOST.NAME}&eol;Low level discovery rule: {LLDRULE.NAME}&eol;Key: {LLDRULE.KEY}&eol;State: {LLDRULE.STATE}                                                                                                          |       |1               |                             |                                                                                                                                                                                                         |
ROW   |6       |Report unknown triggers                       |3          |0       |1     |1h        |{TRIGGER.STATE}: {TRIGGER.NAME}            |Trigger name: {TRIGGER.NAME}&eol;Expression: {TRIGGER.EXPRESSION}&eol;State: {TRIGGER.STATE}                                                                                                  |{TRIGGER.STATE}: {TRIGGER.NAME}            |Trigger name: {TRIGGER.NAME}&eol;Expression: {TRIGGER.EXPRESSION}&eol;State: {TRIGGER.STATE}                                                                                                                              |       |1               |                             |                                                                                                                                                                                                         |

TABLE |operations
FIELDS|operationid|actionid|operationtype|esc_period|esc_step_from|esc_step_to|evaltype|recovery|
ROW   |1          |2       |6            |0         |1            |1          |0       |0       |
ROW   |2          |2       |4            |0         |1            |1          |0       |0       |
ROW   |3          |3       |0            |0         |1            |1          |0       |0       |
ROW   |4          |4       |0            |0         |1            |1          |0       |0       |
ROW   |5          |5       |0            |0         |1            |1          |0       |0       |
ROW   |6          |6       |0            |0         |1            |1          |0       |0       |
ROW   |7          |3       |11           |0         |1            |1          |0       |1       |
ROW   |8          |4       |11           |0         |1            |1          |0       |1       |
ROW   |9          |5       |11           |0         |1            |1          |0       |1       |
ROW   |10         |6       |11           |0         |1            |1          |0       |1       |

TABLE |opmessage
FIELDS|operationid|default_msg|subject                                    |message                                                                                                                                                                                                                   |mediatypeid|
ROW   |3          |1          |Problem: {EVENT.NAME}                      |Problem started at {EVENT.TIME} on {EVENT.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}                            |NULL       |
ROW   |4          |1          |                                           |                                                                                                                                                                                                                          |NULL       |
ROW   |5          |1          |                                           |                                                                                                                                                                                                                          |NULL       |
ROW   |6          |1          |                                           |                                                                                                                                                                                                                          |NULL       |
ROW   |7          |1          |Resolved: {EVENT.NAME}                     |Problem has been resolved at {EVENT.RECOVERY.TIME} on {EVENT.RECOVERY.DATE}&eol;Problem name: {EVENT.NAME}&eol;Host: {HOST.NAME}&eol;Severity: {EVENT.SEVERITY}&eol;&eol;Original problem ID: {EVENT.ID}&eol;{TRIGGER.URL}|NULL       |
ROW   |8          |1          |{ITEM.STATE}: {HOST.NAME}:{ITEM.NAME}      |Host: {HOST.NAME}&eol;Item: {ITEM.NAME}&eol;Key: {ITEM.KEY}&eol;State: {ITEM.STATE}                                                                                                                                       |NULL       |
ROW   |9          |1          |{LLDRULE.STATE}: {HOST.NAME}:{LLDRULE.NAME}|Host: {HOST.NAME}&eol;Low level discovery rule: {LLDRULE.NAME}&eol;Key: {LLDRULE.KEY}&eol;State: {LLDRULE.STATE}                                                                                                          |NULL       |
ROW   |10         |1          |{TRIGGER.STATE}: {TRIGGER.NAME}            |Trigger name: {TRIGGER.NAME}&eol;Expression: {TRIGGER.EXPRESSION}&eol;State: {TRIGGER.STATE}                                                                                                                              |NULL       |

TABLE |opmessage_grp
FIELDS|opmessage_grpid|operationid|usrgrpid|
ROW   |1              |3          |7       |
ROW   |2              |4          |7       |
ROW   |3              |5          |7       |
ROW   |4              |6          |7       |

TABLE |opgroup
FIELDS|opgroupid|operationid|groupid|
ROW   |1        |2          |2      |

TABLE |conditions
FIELDS|conditionid|actionid|conditiontype|operator|value|value2|
ROW   |2          |2       |10           |0       |0    |      |
ROW   |3          |2       |8            |0       |9    |      |
ROW   |4          |2       |12           |2       |Linux|      |
ROW   |6          |4       |23           |0       |0    |      |
ROW   |7          |5       |23           |0       |2    |      |
ROW   |8          |6       |23           |0       |4    |      |

TABLE |config
FIELDS|configid|refresh_unsupported|work_period    |alert_usrgrpid|discovery_groupid|
ROW   |1       |10m                |1-5,09:00-18:00|7             |5                |

TABLE |graph_theme
FIELDS|graphthemeid|theme     |backgroundcolor|graphcolor|gridcolor|maingridcolor|gridbordercolor|textcolor|highlightcolor|leftpercentilecolor|rightpercentilecolor|nonworktimecolor|colorpalette                                                                                                                                      |
ROW   |1           |blue-theme|FFFFFF         |FFFFFF    |CCD5D9   |ACBBC2       |ACBBC2         |1F2C33   |E33734        |429E47             |E33734              |EBEBEB          |1A7C11,F63100,2774A4,A54F10,FC6EA3,6C59DC,AC8C14,611F27,F230E0,5CCD18,BB2A02,5A2B57,89ABF8,7EC25C,274482,2B5429,8048B4,FD5434,790E1F,87AC4D,E89DF4|
ROW   |2           |dark-theme|2B2B2B         |2B2B2B    |454545   |4F4F4F       |4F4F4F         |F2F2F2   |E45959        |59DB8F             |E45959              |333333          |199C0D,F63100,2774A4,F7941D,FC6EA3,6C59DC,C7A72D,BA2A5D,F230E0,5CCD18,BB2A02,AC41A5,89ABF8,7EC25C,3165D5,79A277,AA73DE,FD5434,F21C3E,87AC4D,E89DF4|
ROW   |3           |hc-light  |FFFFFF         |FFFFFF    |555555   |000000       |333333         |000000   |333333        |000000             |000000              |EBEBEB          |1A7C11,F63100,2774A4,A54F10,FC6EA3,6C59DC,AC8C14,611F27,F230E0,5CCD18,BB2A02,5A2B57,89ABF8,7EC25C,274482,2B5429,8048B4,FD5434,790E1F,87AC4D,E89DF4|
ROW   |4           |hc-dark   |000000         |000000    |666666   |888888       |4F4F4F         |FFFFFF   |FFFFFF        |FFFFFF             |FFFFFF              |333333          |199C0D,F63100,2774A4,F7941D,FC6EA3,6C59DC,C7A72D,BA2A5D,F230E0,5CCD18,BB2A02,AC41A5,89ABF8,7EC25C,3165D5,79A277,AA73DE,FD5434,F21C3E,87AC4D,E89DF4|

TABLE |globalmacro
FIELDS|globalmacroid|macro            |value |description|
ROW   |2            |{$SNMP_COMMUNITY}|public|           |

TABLE |regexps
FIELDS|regexpid|name                                        |test_string|
ROW   |1       |File systems for discovery                  |ext3       |
ROW   |2       |Network interfaces for discovery            |eth0       |
ROW   |3       |Storage devices for SNMP discovery          |/boot      |
ROW   |4       |Windows service names for discovery         |SysmonLog  |
ROW   |5       |Windows service startup states for discovery|automatic  |

TABLE |expressions
FIELDS|expressionid|regexpid|expression                                                                                                                                                            |expression_type|exp_delimiter|case_sensitive|
ROW   |1           |1       |^(btrfs&pipe;ext2&pipe;ext3&pipe;ext4&pipe;reiser&pipe;xfs&pipe;ffs&pipe;ufs&pipe;jfs&pipe;jfs2&pipe;vxfs&pipe;hfs&pipe;apfs&pipe;refs&pipe;ntfs&pipe;fat32&pipe;zfs)$|3              |,            |0             |
ROW   |3           |3       |^(Physical memory&pipe;Virtual memory&pipe;Memory buffers&pipe;Cached memory&pipe;Swap space)$                                                                        |4              |,            |1             |
ROW   |5           |4       |^(MMCSS&pipe;gupdate&pipe;SysmonLog&pipe;clr_optimization_v2.0.50727_32&pipe;clr_optimization_v4.0.30319_32)$                                                         |4              |,            |1             |
ROW   |6           |5       |^(automatic&pipe;automatic delayed)$                                                                                                                                  |3              |,            |1             |
ROW   |7           |2       |^Software Loopback Interface                                                                                                                                          |4              |,            |1             |
ROW   |8           |2       |^(In)?[Ll]oop[Bb]ack[0-9._]*$                                                                                                                                         |4              |,            |1             |
ROW   |9           |2       |^NULL[0-9.]*$                                                                                                                                                         |4              |,            |1             |
ROW   |10          |2       |^[Ll]o[0-9.]*$                                                                                                                                                        |4              |,            |1             |
ROW   |11          |2       |^[Ss]ystem$                                                                                                                                                           |4              |,            |1             |
ROW   |12          |2       |^Nu[0-9.]*$                                                                                                                                                           |4              |,            |1             |

TABLE |config_autoreg_tls
FIELDS|autoreg_tlsid|tls_psk_identity|tls_psk|
ROW   |1            |                |       |

