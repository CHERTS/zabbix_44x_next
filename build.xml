<?xml version="1.0" encoding="UTF-8"?>
<project name="Zabbix" default="build" basedir=".">
	<target name="init-common">
		<condition property="phpunit_filter" value=" --filter='${PHPUNIT_FILTER}'" else="">
			<and>
				<isset property="PHPUNIT_FILTER" />
				<length string="${PHPUNIT_FILTER}" when="greater" length="0"/>
			</and>
		</condition>

		<!-- Cleanup from the previous run -->
		<delete dir="build/logs" failonerror="off"/>
		<mkdir dir="build/logs"/>
		<mkdir dir="runtime"/>
	</target>

	<target name="create-configs" depends="init-common">
		<property name="url" value="${URL}"/>
		<property name="dbtype" value="${DBTYPE}"/>
		<property name="dbhost" value="${DBHOST}"/>
		<property name="dbname" value="${DBNAME}"/>
		<property name="dbuser" value="${DBUSER}"/>
	 	<property name="dbpassword" value="${DBPASSWORD}"/>
	 	<property name="phpunit_error_log" value="${PHPUNIT_ERROR_LOG}"/>
	 	<property name="phpunit_port_prefix" value="${PHPUNIT_PORT_PREFIX}"/>
		<property name="screenshot_references_dir" value="${SCREENSHOT_REFERENCES_DIR}"/>
		<condition property="phpunit_driver_address" value="${PHPUNIT_DRIVER_ADDRESS}" else="localhost">
			<and>
				<isset property="PHPUNIT_DRIVER_ADDRESS" />
				<length string="${PHPUNIT_DRIVER_ADDRESS}" when="greater" length="0"/>
			</and>
		</condition>
		<property environment="env"/>

		<!-- Create bootstrap.php -->
		<copy overwrite="true" file="frontends/php/tests/bootstrap.php.template" tofile="frontends/php/tests/bootstrap.php"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{URL}" value="${env.WORKSPACE_URL}${url}"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{BASEDIR}" value="${basedir}"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{SCREENSHOT_DIR}" value="${env.SCREENSHOT_DIR}"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{SCREENSHOT_URL}" value="${env.SCREENSHOT_URL}"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{BINARY_DIR}" value="${basedir}/sbin/"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{CONFIG_SOURCE_DIR}" value="${basedir}/conf/"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{CONFIG_DIR}" value="${basedir}/etc/"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{COMPONENT_DIR}" value="${basedir}/runtime/"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{PORT_PREFIX}" value="${phpunit_port_prefix}"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{SCREENSHOT_REFERENCES_DIR}" value="${screenshot_references_dir}"/>
		<replace file="frontends/php/tests/bootstrap.php" token="{PHPUNIT_DRIVER_ADDRESS}" value="${phpunit_driver_address}"/>

		<!-- Create PHP config file -->
		<copy overwrite="true" file="frontends/php/tests/templates/zabbix.conf.php" tofile="frontends/php/conf/zabbix.conf.php"/>
		<replace file="frontends/php/conf/zabbix.conf.php" token="{DBTYPE}" value="${dbtype}"/>
		<replace file="frontends/php/conf/zabbix.conf.php" token="{DBHOST}" value="${dbhost}"/>
		<replace file="frontends/php/conf/zabbix.conf.php" token="{DBNAME}" value="${dbname}"/>
		<replace file="frontends/php/conf/zabbix.conf.php" token="{DBUSER}" value="${dbuser}"/>
		<replace file="frontends/php/conf/zabbix.conf.php" token="{DBPASSWORD}" value="${dbpassword}"/>
		<replace file="frontends/php/conf/zabbix.conf.php" token="{PHPUNIT_ERROR_LOG}" value="${phpunit_error_log}"/>
	</target>

	<target name="init-integration">
		<!-- Copy agent2 configuration file -->
		<copy overwrite="true" file="src/go/conf/zabbix_agent2.conf" tofile="conf/zabbix_agent2.conf"/>
	</target>

	<target name="make-dbschema">
		<!-- Create database schema -->
		<exec executable="./bootstrap.sh" failonerror="on"/>
		<exec executable="./configure" failonerror="on">
			<arg line="--quiet"/>
		</exec>
		<exec executable="make" failonerror="on">
			<arg line="-j4"/>
			<arg line="-s"/>
			<arg line="dbschema"/>
		</exec>
	</target>

	<target name="make-binaries-postgresql">
		<!-- Binaries for integration tests -->
		<exec executable="./bootstrap.sh" failonerror="on"/>
		<exec executable="./configure" failonerror="on">
			<arg line="--quiet"/>
			<arg line="--enable-server"/>
			<arg line="--enable-proxy"/>
			<arg line="--enable-agent"/>
			<arg line="--enable-agent2"/>
			<arg line="--with-postgresql"/>
			<arg line="--prefix=${basedir}"/>
		</exec>
		<exec executable="make" failonerror="on">
			<arg line="-j4"/>
			<arg line="-s"/>
			<arg line="dbschema"/>
		</exec>
		<exec executable="make" failonerror="on">
			<arg line="-j4"/>
			<arg line="-s"/>
			<arg line="install"/>
		</exec>
	</target>

	<target name="init-server-postgresql" depends="">
		<!-- Create PostgreSQL database -->
		<exec executable="psql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="-c 'drop database if exists ${dbname}'"/>
		</exec>
		<exec executable="psql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="-c 'create database ${dbname} ENCODING = UTF8 TEMPLATE = template0'"/>
		</exec>
		<exec executable="psql" input="database/postgresql/schema.sql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="-1"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="${dbname}"/>
		</exec>
		<exec executable="psql" input="database/postgresql/images.sql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="-1"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="${dbname}"/>
		</exec>
		<exec executable="psql" input="database/postgresql/data.sql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="-1"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="${dbname}"/>
		</exec>
	</target>

	<target name="init-proxy-postgresql" depends="">
		<!-- Create PostgreSQL database -->
		<exec executable="psql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="-c 'drop database if exists ${dbname}_proxy'"/>
		</exec>
		<exec executable="psql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="-c 'create database ${dbname}_proxy ENCODING = UTF8 TEMPLATE = template0'"/>
		</exec>
		<exec executable="psql" input="database/postgresql/schema.sql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="-1"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="${dbname}_proxy"/>
		</exec>
	</target>

	<target name="init-frontend-postgresql" depends="create-configs,make-dbschema,init-server-postgresql">
		<exec executable="psql" input="frontends/php/tests/selenium/data/data_test.sql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="-1"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="${dbname}"/>
		</exec>
	</target>

	<target name="init-api-postgresql" depends="create-configs,make-dbschema,init-server-postgresql">
		<exec executable="psql" input="frontends/php/tests/api_json/data/data_test.sql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="-1"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="${dbname}"/>
		</exec>
	</target>

	<target name="init-integration-postgresql" depends="create-configs,init-integration,make-binaries-postgresql,init-server-postgresql,init-proxy-postgresql">
		<exec executable="psql" input="frontends/php/tests/integration/data/data_test.sql" failonerror="on">
			<env key="PGPASSWORD" value="${dbpassword}"/>
			<arg line="-q"/>
			<arg line="-h '${dbhost}'"/>
			<arg line="-U '${dbuser}'"/>
			<arg line="-1"/>
			<arg line="--set ON_ERROR_STOP=1"/>
			<arg line="${dbname}"/>
		</exec>
	</target>

	<target name="make-binaries-mysql">
		<!-- Binaries for integration tests -->
		<exec executable="./bootstrap.sh" failonerror="on"/>
		<exec executable="./configure" failonerror="on">
			<arg line="--quiet"/>
			<arg line="--enable-server"/>
			<arg line="--enable-proxy"/>
			<arg line="--enable-agent"/>
			<arg line="--enable-agent2"/>
			<arg line="--with-mysql"/>
			<arg line="--prefix=${basedir}"/>
		</exec>
		<exec executable="make" failonerror="on">
			<arg line="-j4"/>
			<arg line="-s"/>
			<arg line="dbschema"/>
		</exec>
		<exec executable="make" failonerror="on">
			<arg line="-j4"/>
			<arg line="-s"/>
			<arg line="install"/>
		</exec>
	</target>

	<target name="init-server-mysql" depends="">
		<!-- Create MySQL database -->
		<exec executable="mysql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="--execute='drop database if exists ${dbname}'"/>
		</exec>
		<exec executable="mysql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="--execute='create database ${dbname} character set utf8 collate utf8_bin'"/>
		</exec>
		<exec executable="mysql" input="database/mysql/schema.sql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="${dbname}"/>
		</exec>
		<exec executable="mysql" input="database/mysql/images.sql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="${dbname}"/>
		</exec>
		<exec executable="mysql" input="database/mysql/data.sql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="${dbname}"/>
		</exec>
	</target>

	<target name="init-proxy-mysql" depends="">
		<!-- Create MySQL database -->
		<exec executable="mysql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="--execute='drop database if exists ${dbname}_proxy'"/>
		</exec>
		<exec executable="mysql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="--execute='create database ${dbname}_proxy character set utf8 collate utf8_bin'"/>
		</exec>
		<exec executable="mysql" input="database/mysql/schema.sql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="${dbname}_proxy"/>
		</exec>
	</target>

	<target name="init-frontend-mysql" depends="create-configs,make-dbschema,init-server-mysql">
		<exec executable="mysql" input="frontends/php/tests/selenium/data/data_test.sql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="${dbname}"/>
		</exec>
	</target>

	<target name="init-api-mysql" depends="create-configs,make-dbschema,init-server-mysql">
		<exec executable="mysql" input="frontends/php/tests/api_json/data/data_test.sql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="${dbname}"/>
		</exec>
	</target>

	<target name="init-integration-mysql" depends="create-configs,init-integration,make-binaries-mysql,init-server-mysql,init-proxy-mysql">
		<exec executable="mysql" input="frontends/php/tests/integration/data/data_test.sql" failonerror="on">
			<arg line="--host=${dbhost}"/>
			<arg line="--user=${dbuser}"/>
			<arg line="--password=${dbpassword}"/>
			<arg line="${dbname}"/>
		</exec>
	</target>

	<target name="test-phpunit" depends="init-common">
		<exec executable="phpunit" dir="frontends/php/tests/unit" failonerror="off">
			<arg line="--log-junit=${basedir}/build/logs/phpunit.xml"/>
			<arg line="${phpunit_filter}"/>
			<arg line="include/"/>
		</exec>
	</target>

	<target name="test-frontend">
		<exec executable="phpunit" dir="frontends/php/tests" failonerror="off">
			<arg line="--log-junit=${basedir}/build/logs/phpunit.xml"/>
			<arg line="--bootstrap=bootstrap.php"/>
			<arg line="${phpunit_filter}"/>
			<arg line="frontend.php"/>
		</exec>
	</target>

	<target name="test-api">
		<exec executable="phpunit" dir="frontends/php/tests" failonerror="off">
			<arg line="--log-junit=${basedir}/build/logs/phpunit.xml"/>
			<arg line="--bootstrap=bootstrap.php"/>
			<arg line="${phpunit_filter}"/>
			<arg line="api_json/ApiJsonTests.php"/>
		</exec>
	</target>

	<target name="test-integration">
		<exec executable="phpunit" dir="frontends/php/tests" failonerror="off">
			<arg line="--log-junit=${basedir}/build/logs/phpunit.xml"/>
			<arg line="--bootstrap=bootstrap.php"/>
			<arg line="${phpunit_filter}"/>
			<arg line="integration/IntegrationTests.php"/>
		</exec>
	</target>

	<target name="build-phpunit" depends="test-phpunit"/>
	<target name="build-mysql" depends="init-frontend-mysql,test-frontend"/>
	<target name="build-postgresql" depends="init-frontend-postgresql,test-frontend"/>
	<target name="build-api-mysql" depends="init-api-mysql,test-api"/>
	<target name="build-api-postgresql" depends="init-api-postgresql,test-api"/>
	<target name="build-integration-mysql" depends="init-integration-mysql,test-integration"/>
	<target name="build-integration-postgresql" depends="init-integration-postgresql,test-integration"/>

	<!-- Default target -->
	<target name="build" depends="build-phpunit,build-mysql,build-postgresql,build-integration-mysql,build-integration-postgresql"/>
</project>
